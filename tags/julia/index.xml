<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>julia | Daniel Molina profile</title>
    <link>/tags/julia/</link>
      <atom:link href="/tags/julia/index.xml" rel="self" type="application/rss+xml" />
    <description>julia</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Fri, 21 Aug 2020 22:08:00 +0200</lastBuildDate>
    <image>
      <url>/img/icon-192.png</url>
      <title>julia</title>
      <link>/tags/julia/</link>
    </image>
    
    <item>
      <title>My Julia journey</title>
      <link>/post/julia_journey/</link>
      <pubDate>Fri, 21 Aug 2020 22:08:00 +0200</pubDate>
      <guid>/post/julia_journey/</guid>
      <description>&lt;p&gt;In this post I am going to tell my Julia journey.&lt;/p&gt;
&lt;p&gt;I have read about Julia but not actually use it before version 0.7 just before
1.0. I work on Machine Learning and stochastic optimization (with evolutionary
computation). In Machine Learning (and Deep Learning) I work nicely with Python
(Scikit-learn and Keras/PyTorch). However, in optimization I usually did
prototype in Python, and later have to translate to C++ for performance (well,
not while the function evaluation takes too much). Now I starting using Julia
for these algorithms (I prefer it a lot against Numpy). For ML I am actually
testing options with Julia
(&lt;a href=&#34;https://github.com/alan-turing-institute/MLJ.jl&#34;&gt;MLJ.jl&lt;/a&gt; and
&lt;a href=&#34;https://github.com/FluxML/Flux.jl&#34;&gt;Flux&lt;/a&gt; mainly).&lt;/p&gt;
&lt;p&gt;My main problem is the lack of examples/tutorials in the documentation for
several packages. Also, some missing functionality. I am going to explain it
with an example. I did a small website in Julia to receive a file and transform
it (for learning, I have experience in other technologies like Python/JS, ..)
&lt;a href=&#34;http://pradofacil.danimolina.net/&#34;&gt;http://pradofacil.danimolina.net/&lt;/a&gt;. I did it using Frankling have to create my
own website, it was nice. The server side I have two problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;HTTP.jl is simple but not very complete, I have to create my own function to
extract the POST parameters.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I wanted to have error messages in two different languages (English and
Spanish), but the Gettext package did required Python, and I do not want to
install it in the server only for that. So, I create my own package
&lt;a href=&#34;https://github.com/dmolina/SimpleTranslations.jl&#34;&gt;SimpleTranslation.jl&lt;/a&gt; to
translate easy messages in a simple way.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Usually I create scripts, but in Julia the time required to load the packages
make them slower than similar to Python. In order to reduce that problem I
recently created &lt;a href=&#34;https://github.com/dmolina/DaemonMode.jl&#34;&gt;DaemonMode.jl&lt;/a&gt;
package, that got a great interest (even it was mentioned in JuliaCon 2020!).&lt;/p&gt;
&lt;p&gt;The good and bad:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;good: How easily is to create packages, and register it. The syntax, and many
great packages: DataFrames, Plots, &amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;bad: documentation of several packages. There is the API, but learning to use
them usually implies several tests.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To summarise, it is a great language. When you use it, sometimes to affort small
problems due to a not too mature ecosystem, but the evolution is clearly to
best. For sure I will use it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My first Julia Package</title>
      <link>/post/moodlequestions/</link>
      <pubDate>Fri, 27 Mar 2020 23:54:00 +0100</pubDate>
      <guid>/post/moodlequestions/</guid>
      <description>&lt;p&gt;For online teaching I use Moodle. I have a lot of experience using it (for more
than 10 years). Unfortunately, the software could be improved a lot. My main
complains are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You can import the grades using an Excel file. However, you cannot import the
comments.  I like to give comment to explain the reason of the qualifications.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Quiz is potent, but the creation of questions is very slow. Also, in my
University several teachers have historically used another software. However,
Moodle is unable to import these questions (in a different XML format).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In order to solve the second one, and in conjunction with my interest in Julia,
I have created a package: &lt;a href=&#34;https://github.com/dmolina/MoodleQuestions.jl&#34;&gt;MoodleQuestions&lt;/a&gt;. Not only it is able to export from
the previous software, but it is also able to create the questions in a
MoodleXML from a more intuitive file, in text file:&lt;/p&gt;
&lt;h2 id=&#34;input-text-file-format&#34;&gt;Input text file format&lt;/h2&gt;
&lt;p&gt;This package is able to read a text file. The format has been designed to be as simple and readable as possible.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt; * Category 1

Question 1

- Option 1.1.
- Option 1.2.
+ Option 1.3.

 * Category 2

Question 2

+ Option 2.1.
- Option 2.2.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The sentences starting with * is a new category, with the name.&lt;/p&gt;
&lt;p&gt;The sentences without *, +, or - are the text of the question. It is expected to
be from only one line.&lt;/p&gt;
&lt;p&gt;The sentences starting with - or + and the different answers for the previous
question. The - means that the answer is false, and the + means that the
sentence is the right answer.&lt;/p&gt;
&lt;p&gt;The answers in the question are shuffle, except when one of the word of A, B,
&amp;hellip; is used. In these cases, the order of the options is maintained.&lt;/p&gt;
&lt;p&gt;In my opinion, to create a text file with the questions in that format is a lot
easier than using the web interface of Moodle.&lt;/p&gt;
&lt;h2 id=&#34;my-experience-creating-a-package&#34;&gt;My experience creating a package&lt;/h2&gt;
&lt;p&gt;I have experience creating a PyPI package in Python, and I only can say that
creating a Julia package is a lot easier.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First, there are packages like &lt;a href=&#34;https://github.com/invenia/PkgTemplates.jl&#34;&gt;PkgTemplates&lt;/a&gt; that create all the structure of
the code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Because in Julia you can add a non-official package adding the github url,
you can use the package working (and share it) without have to register it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The tests can be tested very easily with &lt;a href=&#34;https://travis-ci.com/dmolina/MoodleQuestions.jl&#34;&gt;Tracis CI&lt;/a&gt;, for different Julia
version and Operative System (it detected an error only in Windows). However,
because Julia is not officially supported and the Sandbox implies to install
all required packages for each time, the time in the test implies a lot of
time, more than 1m30 in several versions. At least, it gives the tranquility
of working in different julia versions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The documentation can be done very easily with &lt;a href=&#34;https://github.com/JuliaDocs/Documenter.jl&#34;&gt;Documenter.jl&lt;/a&gt;, and it publish
in Github Pages (the only problem was to define the DOCUMENTER_KEY
environment variable, but the error was clear).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Registration is was very simple. Originally, you had to do a Pull Request
to the &lt;a href=&#34;https://github.com/JuliaRegistries/General&#34;&gt;https://github.com/JuliaRegistries/General&lt;/a&gt; repository. However,
nowadays you should use &lt;a href=&#34;https://github.com/JuliaRegistries/Registrator.jl&#34;&gt;https://github.com/JuliaRegistries/Registrator.jl&lt;/a&gt;,
that with a simple web interface it will do the PR for you (only the URL is
required).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To summarise, the experience has been very positive. In my opinion, you are a
lot more lost than in Python when you have to create your first setup.py, and it
is easier to follow the good practices of Continous Integration with tests and
Documentation. Also, there is a great presentation at
&lt;a href=&#34;https://www.youtube.com/watch?v=QVmU29rCjaA&#34;&gt;https://www.youtube.com/watch?v=QVmU29rCjaA&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to Julia</title>
      <link>/post/julia_intro/</link>
      <pubDate>Mon, 20 Jan 2020 19:19:00 +0100</pubDate>
      <guid>/post/julia_intro/</guid>
      <description>&lt;p&gt;The last year I have been working in a promising programming language,
&lt;a href=&#34;http://julialang.org/&#34;&gt;Julia&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Even I have done a presentation focused on people with Computer Science
background (so the talk compares Julia against Python),&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/dmolina/julia%5Fpresentacion/raw/master/Julia%5FPresentation%5Fslides.pdf&#34;&gt;Talk in English&lt;/a&gt;
&lt;img src=&#34;/img/julia_intro_en.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Also it was given in Spanish&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/dmolina/julia%5Fpresentacion/blob/master/Julia%5FPresentacion%5Fslides.pdf&#34;&gt;Julia Talk in Spanish&lt;/a&gt;
&lt;img src=&#34;/img/julia_intro_es.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The resources of that talk are available at &lt;a href=&#34;https://github.com/dmolina/julia%5Fpresentacion/&#34;&gt;Github
Repository&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
