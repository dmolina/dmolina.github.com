<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Daniel Molina profile</title>
    <link>/</link>
      <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <description>Daniel Molina profile</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Mon, 20 Jan 2020 19:19:00 +0100</lastBuildDate>
    <image>
      <url>/img/icon-192.png</url>
      <title>Daniel Molina profile</title>
      <link>/</link>
    </image>
    
    <item>
      <title>Introduction to Julia</title>
      <link>/post/julia_intro/</link>
      <pubDate>Mon, 20 Jan 2020 19:19:00 +0100</pubDate>
      <guid>/post/julia_intro/</guid>
      <description>&lt;p&gt;The last year I have been working in a promising programming language,
&lt;a href=&#34;http://julialang.org/&#34;&gt;Julia&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Even I have done a presentation focused on people with Computer Science
background (so the talk compares Julia against Python),&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/dmolina/julia%5Fpresentacion/raw/master/Julia%5FPresentation%5Fslides.pdf&#34;&gt;Talk in English&lt;/a&gt;
&lt;img src=&#34;/img/julia_intro_en.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Also it was given in Spanish&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/dmolina/julia%5Fpresentacion/blob/master/Julia%5FPresentacion%5Fslides.pdf&#34;&gt;Julia Talk in Spanish&lt;/a&gt;
&lt;img src=&#34;/img/julia_intro_es.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The resources of that talk are available at &lt;a href=&#34;https://github.com/dmolina/julia%5Fpresentacion/&#34;&gt;Github
Repository&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A novel memetic framework for enhancing differential evolution algorithms via combination with alopex local search</title>
      <link>/publication/leon-2019795/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>/publication/leon-2019795/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Applying Memetic algorithm with Improved L-SHADE and Local Search Pool for the 100-digit challenge on Single Objective Numerical Optimization</title>
      <link>/publication/molina-20197/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>/publication/molina-20197/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Bio-inspired computation: Where we stand and what&#39;s next</title>
      <link>/publication/del-ser-2019220/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>/publication/del-ser-2019220/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Comparing Large-Scale Global Optimization Competition winners in a real-world problem</title>
      <link>/publication/molina-2019359/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>/publication/molina-2019359/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Packages in Python for CEC&#39;2019 100 Digit Competition</title>
      <link>/post/cec2019comp100digit/</link>
      <pubDate>Fri, 14 Dec 2018 12:11:00 +0100</pubDate>
      <guid>/post/cec2019comp100digit/</guid>
      <description>&lt;p&gt;I usually design my evolutionary algorithms in Python (initially for
prototyping, but I am too lazy for doing later a version in C/C++ or similar).
However, unfortunately, the majority of people in my area work in Matlab 😭.
Thus, sometimes I have to wrap the source code for the benchmarks in competition
to python ☺.&lt;/p&gt;
&lt;p&gt;This is the story of the my new package at PyPi:
&lt;a href=&#34;https://pypi.org/project/cec2019comp100digit/&#34;&gt;https://pypi.org/project/cec2019comp100digit/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This package is for being able to participate in the &lt;a href=&#34;http://cec2019.org/programs/competitions.html#cec-06&#34;&gt;CEC&#39;2019 100-Digit Challenge
Competition&lt;/a&gt;, website here:
&lt;a href=&#34;http://www.ntu.edu.sg/home/epnsugan/index%5Ffiles/CEC2019/CEC2019.htm&#34;&gt;http://www.ntu.edu.sg/home/epnsugan/index%5Ffiles/CEC2019/CEC2019.htm&lt;/a&gt;.
That website was the source code in C/C++ and Matlab (using mex), but it was
missing Python. This package solves it.&lt;/p&gt;
&lt;p&gt;As usual, the complete source code is &lt;a href=&#34;https://github.com/dmolina/cec2019comp100digit&#34;&gt;available at Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the package Pypi page there is &lt;a href=&#34;https://pypi.org/project/cec2019comp100digit/&#34;&gt;more documentation&lt;/a&gt;, but in the following I
briefly describe the API:&lt;/p&gt;
&lt;p&gt;The package is very simple to use. There is a package cec2019comp100digit with
three functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;init(fun_id, Dim)&lt;/strong&gt;
Init the function for the dimension selected.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;eval(sol)&lt;/strong&gt;
Eval the solution, when sol is a numpy (or array) of dimension &lt;strong&gt;Dim&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;end()&lt;/strong&gt;
Free resources.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;
&lt;p&gt;It as simple as:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pip install cec2019comp100digit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python3.&lt;/li&gt;
&lt;li&gt;Numpy.&lt;/li&gt;
&lt;li&gt;Cython.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;process&#34;&gt;Process&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For init the function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from cec2019comp100digit import cec2019comp100digit
bench = cec2019comp100digit
bench.init(3, 10) # Init function 3 with dimension 10
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To create one or several solutions to eval&lt;/p&gt;
&lt;p&gt;It can be used both numpy and/or array (but only numpy has been actually
tested).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
sol = np.random.rand(10)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Evaluate the solution&lt;/p&gt;
&lt;p&gt;It is as simple as:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fit = bench.eval(sol)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, for free the resources&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;bench.end()
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also use it for participate in the competition.&lt;/p&gt;
&lt;p&gt;I would like to take this opportunity to remind you that I too am organising
&lt;a href=&#34;https://dmolina.github.io/en/post/lsgo%5Fcec2019/&#34;&gt;another competition&lt;/a&gt;, you do not any excuse 😄.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New LSGO Competition at the CEC&#39;2019</title>
      <link>/post/lsgo_cec2019/</link>
      <pubDate>Thu, 13 Dec 2018 11:47:00 +0100</pubDate>
      <guid>/post/lsgo_cec2019/</guid>
      <description>&lt;p&gt;I write because I am organizing the &lt;a href=&#34;http://www.tflsgo.org/special%5Fsessions/cec2019.html&#34;&gt;Large-Scale Global Optimization Competition&lt;/a&gt;
at the &lt;a href=&#34;http://cec2019.org/&#34;&gt;IEEE Congress on Evolutionary Computation CEC&#39;2019&lt;/a&gt;, with interesting
news:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Source code for C++/Matlab/Java/Python.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The source code store during the run all required files with the results, you
do not need to worry about that, we do it for you!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In python it is as simple as &lt;em&gt;pip install cec2013lsgo&lt;/em&gt; to be able to run the
experiments, in C++, and the source code and documentation is &lt;a href=&#34;https://github.com/dmolina/cec2013lsgo/&#34;&gt;freely available&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The new site &lt;a href=&#34;https://tacolab.org&#34;&gt;tacolab.org&lt;/a&gt; to compare your own proposals with existings ones, it
do the tables, figures and comparisons for you (including statistical testing).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is not excuse for not participating!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to CMake</title>
      <link>/post/intro_cmake/</link>
      <pubDate>Sat, 24 Nov 2018 22:11:00 +0100</pubDate>
      <guid>/post/intro_cmake/</guid>
      <description>&lt;p&gt;In my last course, I decided to give a small introduction about CMake. The
reason is that, although we teach them Make, the majority of students do not use
them in their programs. In fact, many times they create a &amp;ldquo;makefile&amp;rdquo; program to
pretend they are using &amp;ldquo;make&amp;rdquo;, but actually, it is a bash script.
My intention is to teach them &lt;a href=&#34;http://cmake.org/&#34;&gt;&lt;strong&gt;Cmake&lt;/strong&gt;&lt;/a&gt; to encourage them to use an automatic tool
for compiling, expecting they use it more, by its simpler syntax.&lt;/p&gt;
&lt;p&gt;The english version is:&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/capture_english.png&#34; &gt;
&lt;img data-src=&#34;/img/capture_english.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;The spanish version is:&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/capture_spanish.png&#34; &gt;
&lt;img data-src=&#34;/img/capture_spanish.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;All the source code (in &lt;a href=&#34;https://github.com/hakimel/reveal.js/&#34;&gt;reveal.js&lt;/a&gt;, through &lt;a href=&#34;https://github.com/yjwen/org-reveal/&#34;&gt;org-reveal&lt;/a&gt;) are available at:
&lt;a href=&#34;https://github.com/dmolina/intro_cmake&#34;&gt;https://github.com/dmolina/intro_cmake&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Participation in IEEE Congress on Evolutionary Computation CEC&#39;2018</title>
      <link>/post/cec2018/</link>
      <pubDate>Tue, 13 Nov 2018 14:09:00 +0100</pubDate>
      <guid>/post/cec2018/</guid>
      <description>&lt;p&gt;Several weeks ago, I was at the the &lt;a href=&#34;http://www.ecomp.poli.br/~wcci2018/&#34;&gt;IEEE Conference on Evolutionary Computation
(CEC&#39;2018)&lt;/a&gt;, and also at the National Conference on Artificial Intelligence,
in Spain, &lt;a href=&#34;https://sci2s.ugr.es/caepia18/inicio.html&#34;&gt;website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&#34;https://speakerdeck.com/dmolina&#34;&gt;https://speakerdeck.com/dmolina&lt;/a&gt; there are the slides of my
presentations in the International Conference.&lt;/p&gt;
&lt;p&gt;In particular, my works are the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A new algorithm, &lt;strong&gt;SHADE-ILS&lt;/strong&gt; which won the Large Scale Global Optimization,
&lt;a href=&#34;https://speakerdeck.com/dmolina/shade-with-iterative-local-search-for-large-scale-global-optimization&#34;&gt;slides&lt;/a&gt;. You spanish readers, there is also a new &lt;a href=&#34;https://speakerdeck.com/dmolina/shade-con-una-busqueda-local-iterativa-para-optimizacion-continua-de-alta-dimensionalidad&#34;&gt;version in Spanish.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;In English&lt;/strong&gt;&lt;/p&gt;
&lt;script async class=&#34;speakerdeck-embed&#34;
data-id=&#34;22192a5760234cb8984632450bec1b42&#34; data-ratio=&#34;1.33333333333333&#34;
src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;strong&gt;In Spanish&lt;/strong&gt;&lt;/p&gt;
&lt;script async class=&#34;speakerdeck-embed&#34;
data-id=&#34;91646e938fd34096b1613126a1828101&#34; data-ratio=&#34;1.33333333333333&#34;
src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/winner_lsgo_2018.png&#34; data-caption=&#34;Figure 1: Certificate as a winner of the LSGO competition&#34;&gt;
&lt;img data-src=&#34;/img/winner_lsgo_2018.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Figure 1: Certificate as a winner of the LSGO competition
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;A new website for comparisons algorithms, &lt;a href=&#34;https://tacolab.org&#34;&gt;https://tacolab.org&lt;/a&gt;, which is briefly
described &lt;a href=&#34;https://speakerdeck.com/dmolina/taco-toolkit-for-automatic-comparison-optimizers-for-lsgo&#34;&gt;here in English&lt;/a&gt;, and &lt;a href=&#34;http://slides.tacolab.org/&#34;&gt;also in Spanish&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt;: I will talk about the Tacolab website in next entries, because it is the
results of many weeks of works.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An Insight into Bio-inspired and Evolutionary Algorithms for Global Optimization: Review, Analysis, and Lessons Learnt over a Decade of Competitions</title>
      <link>/publication/molina-2018517/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>/publication/molina-2018517/</guid>
      <description></description>
    </item>
    
    <item>
      <title>SHADE with Iterative Local Search for Large-Scale Global Optimization</title>
      <link>/publication/molina-2018/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      <guid>/publication/molina-2018/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Bokeh plot in Django and with REST and Flask</title>
      <link>/post/rest_bokeh/</link>
      <pubDate>Tue, 19 Dec 2017 17:01:00 +0100</pubDate>
      <guid>/post/rest_bokeh/</guid>
      <description>&lt;p&gt;Last weeks I have working with a django app for research. I will update it when
it will be ready ;-).&lt;/p&gt;
&lt;p&gt;However, the introduction of Javascript and specifically &lt;a href=&#34;https://vuejs.org/&#34;&gt;Vue.js&lt;/a&gt; have produce
that the website is mainly dynamic using JS and not Python. Also, we have done
a static website &lt;a href=&#34;http://www.tflsgo.org/&#34;&gt;http://www.tflsgo.org/&lt;/a&gt; (using &lt;a href=&#34;https://docs.gitlab.com/ee/user/project/pages/index.html&#34;&gt;Gitlab Page&lt;/a&gt; and &lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;), so I
started considering to transform the website to a static website using Rest
service with Python.&lt;/p&gt;
&lt;p&gt;First, I was considering &lt;a href=&#34;http://www.django-rest-framework.org/&#34;&gt;Django Rest Framework&lt;/a&gt; but finally I decided to use
&lt;a href=&#34;https://flask-restful.readthedocs.io/en/latest/&#34;&gt;Flask-Restful&lt;/a&gt; by its simplicity (and &lt;a href=&#34;http://flask-sqlalchemy.pocoo.org/2.3/&#34;&gt;Flask-SQLAlchemy&lt;/a&gt; for the communication with
the database).&lt;/p&gt;
&lt;p&gt;The problem with that was how to serve the &lt;a href=&#34;https://bokeh.pydata.org/en/latest/&#34;&gt;Bokeh&lt;/a&gt; figures as Rest services. I
starting reading websites and manual and searching but I didn&#39;t get any
satisfactory answer.&lt;/p&gt;
&lt;p&gt;Hours later, I obtained the answer, so I am going to explain it to avoid the reader
to waste his/her time.&lt;/p&gt;
&lt;h2 id=&#34;using-django&#34;&gt;Using django&lt;/h2&gt;
&lt;p&gt;First,  the solution is the embed subpackage at
&lt;a href=&#34;https://bokeh.pydata.org/en/latest/docs/reference/embed.html&#34;&gt;https://bokeh.pydata.org/en/latest/docs/reference/embed.html&lt;/a&gt;.  There are several
options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;file_html:&lt;/strong&gt; generate the html output, it is not useful for  rest.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;server_document:&lt;/strong&gt; It requires a Bokeh server.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;components:&lt;/strong&gt; It returns a js script and a div to include.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;autoload_static:&lt;/strong&gt; It returns a js function and a div to include.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the django layout, I used:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
...
{% block bokeh_js %}{% endblock %}
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
...
{% block bokeh_fig %}{% endblock %}
&amp;lt;/body&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the template I done:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{% block bokeh_fig %}
{% for fig in bokeh_divs %}
&amp;lt;h2&amp;gt;{{fig.0}}&amp;lt;/h2&amp;gt;
{{ fig.1 | safe}}
{% endfor %}
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;safe&lt;/strong&gt; is required to allow the bokeh visualization,  and &lt;strong&gt;fig&lt;/strong&gt; is a dictionary.
Using the default django template system,  &lt;strong&gt;fig.0&lt;/strong&gt; refers to the key and &lt;strong&gt;fig.1&lt;/strong&gt;
refers to the value.&lt;/p&gt;
&lt;p&gt;When the views generate these variable by:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;scripts, divs = components(figs)

return render(request, &#39;compare.html&#39;, {
   # ...
   &#39;bokeh_script&#39;:  scripts,
   &#39;bokeh_divs&#39;:  divs_sorted,
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;when figs is a dictionary with the different plot by figures. The idea was to
visualize the plots with a title with the caption of each one of them.&lt;/p&gt;
&lt;h2 id=&#34;flask-rest-version&#34;&gt;Flask-Rest version&lt;/h2&gt;
&lt;p&gt;Although we could visualize using function &lt;strong&gt;components&lt;/strong&gt;, for the Rest service it
was not adequate.&lt;/p&gt;
&lt;p&gt;In the html page, the bokeh and jquery are required:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&amp;quot;https://code.jquery.com/jquery-3.2.1.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;http://cdn.pydata.org/bokeh/release/bokeh-0.12.13.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;http://cdn.pydata.org/bokeh/release/bokeh-widgets-0.12.13.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;http://cdn.pydata.org/bokeh/release/bokeh-tables-0.12.13.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and a div in which the figure will be shown:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;body&amp;gt;
...
&amp;lt;div id=&amp;quot;#fig&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The complete file is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;Test&amp;lt;/title&amp;gt;
&amp;lt;script src=&amp;quot;https://code.jquery.com/jquery-3.2.1.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;http://cdn.pydata.org/bokeh/release/bokeh-0.12.13.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;http://cdn.pydata.org/bokeh/release/bokeh-widgets-0.12.13.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;http://cdn.pydata.org/bokeh/release/bokeh-tables-0.12.13.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
        &amp;lt;meta charset=&amp;quot;utf-8&amp;quot; /&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;h1&amp;gt;Test&amp;lt;/h1&amp;gt;
        &amp;lt;div id=&amp;quot;fig&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;script src=&amp;quot;./run.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, the web apps include:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from flask import Flask
from flask_restful import Resource, Api
from flask_cors import CORS

from holoviews as hv
from bokeh.resources import CDN
from bokeh.embed import autoload_static

# Create the app
app = Flask(__name__)
# Initially I was the error Cross Origin Resource Sharing
# that allow all origin domains, not complete sure, only by demo
CORS(app)
# Restful
api = Api(app)

# Configurate  holoviews to create bokeh figures
hv.extension(&#39;bokeh&#39;)
renderer = hv.renderer(&#39;bokeh&#39;)

# An example of generation of bokeh
def get_plot():
    xs = range(-10,11)
    ys = [100+x**2 for x in xs]
    plot_hv = hv.Curve((xs, ys))
    plot = renderer.get_plot(plot_hv).state
    return plot

# Example
class Figure(Resource):
    def get(self):
        plot = get_plot()
        div, js = components(plot)
        js, tags = autoload_static(plot, CDN, &amp;quot;fig/&amp;quot;)
       return {&#39;js&#39;: js, &#39;tags&#39;: tags}

api.add_resource(Figure, &#39;/fig&#39;)

if __name__ == &#39;__main__&#39;:
    app.run()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The js variable is the javascript function to run the visualization of the Bokeh
figure, and tags is the div in which the figure will be shown.&lt;/p&gt;
&lt;p&gt;The final JS code is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$.ajax({
    url: &#39;http://localhost:5000/fig&#39;,
    method: &#39;GET&#39;,
    success: function(data) {
        console.log(data);
        // First,  the div code is inserted
        $(&#39;#fig&#39;).replaceWith(data[&#39;tags&#39;]);
        // Later, the JS code must be evaluated
        eval(data[&#39;js&#39;]);
    },
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the result is:&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/rest_test.png&#34; &gt;
&lt;img data-src=&#34;/img/rest_test.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>Fill-more or the important of reading documentation</title>
      <link>/post/emacs_justify/</link>
      <pubDate>Fri, 15 Dec 2017 11:28:00 +0100</pubDate>
      <guid>/post/emacs_justify/</guid>
      <description>&lt;p&gt;I &lt;strong&gt;love&lt;/strong&gt; Emacs and the auto-fill more. When I work I use it always to make
easier to read the text (with a small value, like 80 or 100). Then, if I have
to copy to a Word Document (in collaboration with other people) or a text (like
in the submission of a review) I simple set the fill-column to a large value
(2000 or similar), with C-x f. Later, I copy all the text.&lt;/p&gt;
&lt;p&gt;Until now I have suffered in silence a small problem in text-mode (not in
org-mode). If you put&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Text.

- Item 1.
- Item 2.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the fill-mode, you have:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Text.

- Item 1 Item 2.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And to have in right you have to put a line between them:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Text.

- Item 1.

- Item 2.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(The line between Text and first item is also required).&lt;/p&gt;
&lt;p&gt;I though it was something inevitable, but checking the documentation,&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.emacswiki.org/emacs/FillParagraph&#34;&gt;https://www.emacswiki.org/emacs/FillParagraph&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I have known that with a simple line in elisp that behavior is fixed:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; The original value is &amp;quot;\f\\|[      ]*$&amp;quot;, so we add the bullets (-), (+), and (*).
;; There is no need for &amp;quot;^&amp;quot; as the regexp is matched at the beginning of line.
(setq paragraph-start &amp;quot;\f\\|[ \t]*$\\|[ \t]*[-+*] &amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I must check the available documentation more often :-).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Firefox 3.5 and Mouseless</title>
      <link>/post/firefox35/</link>
      <pubDate>Tue, 05 Dec 2017 12:10:00 +0100</pubDate>
      <guid>/post/firefox35/</guid>
      <description>&lt;p&gt;I have recently changed to &lt;a href=&#34;https://www.mozilla.org/en-US/firefox/new/&#34;&gt;Firefox 3.5&lt;/a&gt;, and it is awesome!!&lt;/p&gt;
&lt;p&gt;The main improvements I have checked:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Better performance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reader mode, it is very useful to read without distractions, specially in
mobile. Also, it is mouseless friendly, with the shortkey &lt;strong&gt;Ctrl+Alt+r&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Screenshots of a website, that you can share with anybody (not more excuses
for my students for not showing me their web app in develop).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The bad thing is that many extensions are not valid anymore:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.zotero.org/&#34;&gt;Zotero&lt;/a&gt; has changed to be a java application, and the great &lt;a href=&#34;https://github.com/vspinu/zotelo&#34;&gt;Zotelo (extension
for Emacs)&lt;/a&gt; is not working anymore :-(.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Also, several extensions to improve the mouseless navigation stop working.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fortunately, &lt;em&gt;uBlock Origin&lt;/em&gt; is still working, and I have found &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/tridactyl-vim/&#34;&gt;Tridactyl&lt;/a&gt;, an
extension with several nice features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;f&lt;/strong&gt; and &lt;strong&gt;F&lt;/strong&gt; allows you to open links (in same tab or new) identifying them with
letters (in a very sensible way, my favourive way until now).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;b&lt;/strong&gt; is bookmarks, it allows you to go to another open tab.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;s&lt;/strong&gt; is search mode using the history, with tab you can go your favourite website
more easily.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And &lt;strong&gt;ZZ&lt;/strong&gt; close all firefox tabs, very useful for a person with Vim-background
like me :-).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To summarize, if you do not like use the mouse for almost everything, and you
want to browse more easily, try &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/tridactyl-vim/&#34;&gt;Tridactyl&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Elfeed: Using emacs for reading RSS</title>
      <link>/post/emacs_rss/</link>
      <pubDate>Thu, 12 Oct 2017 17:53:00 +0200</pubDate>
      <guid>/post/emacs_rss/</guid>
      <description>&lt;p&gt;In last years I have been using Emacs for almost all my daily tasks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reading my emails (using &lt;a href=&#34;http://www.djcbsoftware.nl/code/mu/mu4e.html&#34;&gt;mu4e&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Creating the slides for my courses using org-beamer.&lt;/li&gt;
&lt;li&gt;Using dired to navigate for the file system).&lt;/li&gt;
&lt;li&gt;Publishing this blog (using &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; and &lt;a href=&#34;https://ox-hugo.scripter.co&#34;&gt;ox-hugo&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last thing to integrate into emacs is reading blogs and news from RSS files.
Adding &lt;a href=&#34;https://github.com/skeeto/elfeed&#34;&gt;elfeed&lt;/a&gt; and &lt;a href=&#34;https://github.com/remyhonig/elfeed-org&#34;&gt;elfeed-org&lt;/a&gt; I was able to create RSS. elfeed-org
is very simple, it allows to add the feeds as items in org-mode:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;- Blogs                                                              :elfeed:

  - https://www.meneame.net/rss                                  :news:portada:
  - https://www.meneame.net/rss?status=queued                            :news:
  - http://planet.emacsen.org/atom.xml                                :emacs:
  - https://www.reddit.com/r/programming/.rss                     :programming:
  ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The tags for each feed will be shared for all articles.&lt;/p&gt;
&lt;p&gt;Then, loading &lt;strong&gt;elfeed&lt;/strong&gt;, it can be obtained a screen showing the different articles:&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/screen/elfeed.png&#34; &gt;
&lt;img data-src=&#34;/screen/elfeed.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;And selecting an article, it can be open, read and open each link by the default browser.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/screen/elfeed2.png&#34; &gt;
&lt;img data-src=&#34;/screen/elfeed2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;Several opinions about elfeed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It is very simple to use.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The use of tags is very powerful, not only they received the tags from the
category, and you can add a tag to an article.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The search filter is simple and very powerful, you can filter both for date and for tags.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The search filter can be kept as bookmark, so using C-x r b it can be seen the
article using a particular filter.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To summary, &lt;strong&gt;elfeed&lt;/strong&gt; has been a great discovery. If you use emacs, give it a try.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Python for Business Intelligence</title>
      <link>/post/python_bi/</link>
      <pubDate>Mon, 09 Oct 2017 18:18:00 +0200</pubDate>
      <guid>/post/python_bi/</guid>
      <description>&lt;p&gt;Two weeks ago I started my first teaching day, replacing a teacher that has
still not gone to Ceuta (because the temporal contract was offered to many
people, and all of them refuse it). Do not worry, they will have the material, I
said to myself, naïvely.&lt;/p&gt;
&lt;p&gt;However, my Phd. advisor, the coordinator of the course, has decided to replace
the practice classes from &lt;a href=&#34;https://www.knime.com/&#34;&gt;Knime&lt;/a&gt; to Python using the different tools availables.
The reason? Because the Python, with R, are very popular in &lt;a href=&#34;https://en.wikipedia.org/wiki/Data_science&#34;&gt;Data Science&lt;/a&gt;. Also,
in Python there are very good tools for data analysis (like &lt;a href=&#34;http://www.numpy.org/&#34;&gt;numpy&lt;/a&gt;, &lt;a href=&#34;http://pandas.pydata.org/&#34;&gt;pandas&lt;/a&gt;) or
machine learning (&lt;a href=&#34;http://scikit-learn.org/stable/&#34;&gt;scikit-learn&lt;/a&gt;, &amp;hellip;). It seems a good idea, but I have not
material, and I have only two days :-O.&lt;/p&gt;
&lt;p&gt;Even more, I had still no access to the Moodle for the material of the course.
So, after a very busy Saturday, I finished including a material,  in
&lt;a href=&#34;http://github.com/dmolina/es_intro_python&#34;&gt;http://github.com/dmolina/es_intro_python&lt;/a&gt;, with interesting references and an
install introduction.&lt;/p&gt;
&lt;p&gt;Also, I use a very curious tool, &lt;a href=&#34;https://gitpitch.com&#34;&gt;https://gitpitch.com&lt;/a&gt;, that allow to create
slides from a markdown file from the repository github, &lt;a href=&#34;https://gitpitch.com/dmolina/es_intro_python/master?grs=github&amp;amp;t=moon&#34;&gt;Slides using Pitch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My final experience was:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Very few students, so it was very relaxed because you can solve the problems
for each student. However, using the &lt;a href=&#34;https://www.anaconda.com/&#34;&gt;anaconda&lt;/a&gt; there is few problems (and the .
In prevision of the big size of the anaconda distribution, my downloaded
version was copied by USB Disk to students.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;a href=&#34;http://jupyter.org/&#34;&gt;jupyter notebook&lt;/a&gt; allow to test the python code without installing or
learning an IDE (later they can install which they prefer, but for teaching
you do not need any of them).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You have to prepare exercises, because if not, you talk and show and you can
finished in few minutes a material that takes you many hours.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you have only a weekend for preparing material, I must have already strong
knowledge about the topic (fortunately,  it was my case). If not, you will not
be confident teaching it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the second day, I was preparing another slide for teaching pandas (with the
most useful operations, by my experience), available as pdf format here:
&lt;a href=&#34;./slides/slides_pandas.pdf&#34;&gt;slides_pandas.pdf&lt;/a&gt; (In a future post, I will say as I
prepare my slides using Emacs+Org-mode). &lt;em&gt;Unfortunately&lt;/em&gt;, the new teacher was
ready,  and I have to finish my courses using python for BI.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Analysis among winners of different IEEE CEC competitions on real-parameters optimization: Is there always improvement?</title>
      <link>/publication/molina-2017805/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>/publication/molina-2017805/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Since CEC 2005 competition on real-parameter optimisation: a decade of research, progress and comparative analysis’s weakness</title>
      <link>/publication/garcia-martinez-20175573/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      <guid>/publication/garcia-martinez-20175573/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A coral reefs optimization algorithm with substrate layers and local search for large scale global optimization</title>
      <link>/publication/salcedo-sanz-20163574/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>/publication/salcedo-sanz-20163574/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Memetic algorithms with local search chains in R: The Rmalschains package</title>
      <link>/publication/bergmeir-2016/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>/publication/bergmeir-2016/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Region-based memetic algorithm with archive for multimodal optimisation</title>
      <link>/publication/lacroix-2016719/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      <guid>/publication/lacroix-2016719/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A high performance memetic algorithm for extremely high-dimensional problems</title>
      <link>/publication/lastra-201535/</link>
      <pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate>
      <guid>/publication/lastra-201535/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A Walk into Metaheuristics for Engineering Optimization: Principles, Methods and Recent Trends</title>
      <link>/publication/xiong-2015606/</link>
      <pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate>
      <guid>/publication/xiong-2015606/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Iterative hybridization of de with Local Search for the CEC&#39;2015 special session on large scale global optimization</title>
      <link>/publication/molina-20151974/</link>
      <pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate>
      <guid>/publication/molina-20151974/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Performance evaluation of automatically tuned continuous optimizers on different benchmark sets</title>
      <link>/publication/liao-2015490/</link>
      <pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate>
      <guid>/publication/liao-2015490/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A Note on Bound Constraints Handling for the IEEE CEC&#39;05 Benchmark Function Suite</title>
      <link>/publication/liao-2014351/</link>
      <pubDate>Wed, 01 Jan 2014 00:00:00 +0000</pubDate>
      <guid>/publication/liao-2014351/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Influence of regions on the memetic algorithm for the CEC&#39;2014 Special Session on Real-Parameter Single Objective Optimisation</title>
      <link>/publication/molina-20141633/</link>
      <pubDate>Wed, 01 Jan 2014 00:00:00 +0000</pubDate>
      <guid>/publication/molina-20141633/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Region based memetic algorithm for real-parameter optimisation</title>
      <link>/publication/lacroix-201415/</link>
      <pubDate>Wed, 01 Jan 2014 00:00:00 +0000</pubDate>
      <guid>/publication/lacroix-201415/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Dynamically updated region based memetic algorithm for the 2013 CEC Special Session and Competition on Real Parameter Single Objective Optimization</title>
      <link>/publication/lacroix-20131945/</link>
      <pubDate>Tue, 01 Jan 2013 00:00:00 +0000</pubDate>
      <guid>/publication/lacroix-20131945/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Variable mesh optimization for the 2013 CEC Special Session Niching Methods for Multimodal Optimization</title>
      <link>/publication/molina-201387/</link>
      <pubDate>Tue, 01 Jan 2013 00:00:00 +0000</pubDate>
      <guid>/publication/molina-201387/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>/post/posts/</link>
      <pubDate>Sun, 15 Jul 2012 00:00:00 +0200</pubDate>
      <guid>/post/posts/</guid>
      <description>&lt;h2 id=&#34;programming&#34;&gt;Programming&lt;/h2&gt;
&lt;h3 id=&#34;bokeh-plot-in-django-and-with-rest-and-flask&#34;&gt;&lt;span class=&#34;org-todo done DONE&#34;&gt;DONE&lt;/span&gt; Bokeh plot in Django and with REST and Flask&lt;/h3&gt;
&lt;p&gt;Last weeks I have working with a django app for research. I will update it when
it will be ready ;-).&lt;/p&gt;
&lt;p&gt;However, the introduction of Javascript and specifically &lt;a href=&#34;https://vuejs.org/&#34;&gt;Vue.js&lt;/a&gt; have produce
that the website is mainly dynamic using JS and not Python. Also, we have done
a static website &lt;a href=&#34;http://www.tflsgo.org/&#34;&gt;http://www.tflsgo.org/&lt;/a&gt; (using &lt;a href=&#34;https://docs.gitlab.com/ee/user/project/pages/index.html&#34;&gt;Gitlab Page&lt;/a&gt; and &lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;), so I
started considering to transform the website to a static website using Rest
service with Python.&lt;/p&gt;
&lt;p&gt;First, I was considering &lt;a href=&#34;http://www.django-rest-framework.org/&#34;&gt;Django Rest Framework&lt;/a&gt; but finally I decided to use
&lt;a href=&#34;https://flask-restful.readthedocs.io/en/latest/&#34;&gt;Flask-Restful&lt;/a&gt; by its simplicity (and &lt;a href=&#34;http://flask-sqlalchemy.pocoo.org/2.3/&#34;&gt;Flask-SQLAlchemy&lt;/a&gt; for the communication with
the database).&lt;/p&gt;
&lt;p&gt;The problem with that was how to serve the &lt;a href=&#34;https://bokeh.pydata.org/en/latest/&#34;&gt;Bokeh&lt;/a&gt; figures as Rest services. I
starting reading websites and manual and searching but I didn&#39;t get any
satisfactory answer.&lt;/p&gt;
&lt;p&gt;Hours later, I obtained the answer, so I am going to explain it to avoid the reader
to waste his/her time.&lt;/p&gt;
&lt;h4 id=&#34;using-django&#34;&gt;Using django&lt;/h4&gt;
&lt;p&gt;First,  the solution is the embed subpackage at
&lt;a href=&#34;https://bokeh.pydata.org/en/latest/docs/reference/embed.html&#34;&gt;https://bokeh.pydata.org/en/latest/docs/reference/embed.html&lt;/a&gt;.  There are several
options:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;file_html&lt;/dt&gt;
&lt;dd&gt;generate the html output, it is not useful for  rest.&lt;/dd&gt;
&lt;dt&gt;server_document&lt;/dt&gt;
&lt;dd&gt;It requires a Bokeh server.&lt;/dd&gt;
&lt;dt&gt;components&lt;/dt&gt;
&lt;dd&gt;It returns a js script and a div to include.&lt;/dd&gt;
&lt;dt&gt;autoload_static&lt;/dt&gt;
&lt;dd&gt;It returns a js function and a div to include.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;In the django layout, I used:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
...
{% block bokeh_js %}{% endblock %}
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
...
{% block bokeh_fig %}{% endblock %}
&amp;lt;/body&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the template I done:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{% block bokeh_fig %}
{% for fig in bokeh_divs %}
&amp;lt;h2&amp;gt;{{fig.0}}&amp;lt;/h2&amp;gt;
{{ fig.1 | safe}}
{% endfor %}
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;safe&lt;/strong&gt; is required to allow the bokeh visualization,  and &lt;strong&gt;fig&lt;/strong&gt; is a dictionary.
Using the default django template system,  &lt;strong&gt;fig.0&lt;/strong&gt; refers to the key and &lt;strong&gt;fig.1&lt;/strong&gt;
refers to the value.&lt;/p&gt;
&lt;p&gt;When the views generate these variable by:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;scripts, divs = components(figs)

return render(request, &#39;compare.html&#39;, {
   # ...
   &#39;bokeh_script&#39;:  scripts,
   &#39;bokeh_divs&#39;:  divs_sorted,
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;when figs is a dictionary with the different plot by figures. The idea was to
visualize the plots with a title with the caption of each one of them.&lt;/p&gt;
&lt;h4 id=&#34;flask-rest-version&#34;&gt;Flask-Rest version&lt;/h4&gt;
&lt;p&gt;Although we could visualize using function &lt;strong&gt;components&lt;/strong&gt;, for the Rest service it
was not adequate.&lt;/p&gt;
&lt;p&gt;In the html page, the bokeh and jquery are required:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&amp;quot;https://code.jquery.com/jquery-3.2.1.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;http://cdn.pydata.org/bokeh/release/bokeh-0.12.13.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;http://cdn.pydata.org/bokeh/release/bokeh-widgets-0.12.13.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;http://cdn.pydata.org/bokeh/release/bokeh-tables-0.12.13.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and a div in which the figure will be shown:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;body&amp;gt;
...
&amp;lt;div id=&amp;quot;#fig&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The complete file is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;title&amp;gt;Test&amp;lt;/title&amp;gt;
&amp;lt;script src=&amp;quot;https://code.jquery.com/jquery-3.2.1.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;http://cdn.pydata.org/bokeh/release/bokeh-0.12.13.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;http://cdn.pydata.org/bokeh/release/bokeh-widgets-0.12.13.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;http://cdn.pydata.org/bokeh/release/bokeh-tables-0.12.13.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
        &amp;lt;meta charset=&amp;quot;utf-8&amp;quot; /&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;h1&amp;gt;Test&amp;lt;/h1&amp;gt;
        &amp;lt;div id=&amp;quot;fig&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;script src=&amp;quot;./run.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, the web apps include:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from flask import Flask
from flask_restful import Resource, Api
from flask_cors import CORS

from holoviews as hv
from bokeh.resources import CDN
from bokeh.embed import autoload_static

# Create the app
app = Flask(__name__)
# Initially I was the error Cross Origin Resource Sharing
# that allow all origin domains, not complete sure, only by demo
CORS(app)
# Restful
api = Api(app)

# Configurate  holoviews to create bokeh figures
hv.extension(&#39;bokeh&#39;)
renderer = hv.renderer(&#39;bokeh&#39;)

# An example of generation of bokeh
def get_plot():
    xs = range(-10,11)
    ys = [100+x**2 for x in xs]
    plot_hv = hv.Curve((xs, ys))
    plot = renderer.get_plot(plot_hv).state
    return plot

# Example
class Figure(Resource):
    def get(self):
        plot = get_plot()
        div, js = components(plot)
        js, tags = autoload_static(plot, CDN, &amp;quot;fig/&amp;quot;)
       return {&#39;js&#39;: js, &#39;tags&#39;: tags}

api.add_resource(Figure, &#39;/fig&#39;)

if __name__ == &#39;__main__&#39;:
    app.run()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The js variable is the javascript function to run the visualization of the Bokeh
figure, and tags is the div in which the figure will be shown.&lt;/p&gt;
&lt;p&gt;The final JS code is:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$.ajax({
    url: &#39;http://localhost:5000/fig&#39;,
    method: &#39;GET&#39;,
    success: function(data) {
        console.log(data);
        // First,  the div code is inserted
        $(&#39;#fig&#39;).replaceWith(data[&#39;tags&#39;]);
        // Later, the JS code must be evaluated
        eval(data[&#39;js&#39;]);
    },
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the result is:&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/rest_test.png&#34; &gt;
&lt;img data-src=&#34;/img/rest_test.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;h3 id=&#34;improving-performance-in-python&#34;&gt;&lt;span class=&#34;org-todo done DONE&#34;&gt;DONE&lt;/span&gt; Improving performance in Python&lt;/h3&gt;
&lt;p&gt;All the source code of this post is available at &lt;a href=&#34;https://github.com/dmolina/pyreal&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the previous post, I recognized my predilection for Python. For me, it is a great language for create prototypes in
many areas. For my research work, I usually creates/designs algorithms for continuous optimization using
&lt;a href=&#34;http://en.wikipedia.org/wiki/Evolutionary%5Falgorithm&#34;&gt;evolutionary algorithms&lt;/a&gt;. For these algorithms, languages like C/C++ or Java are widely used, specially for its
good performance (to publish, it is usual to have to make many comparisons between algorithms, so the performance
could be critical. However, for testing new ideas, many authors uses other tools like Mathlab that reduces the
developer time at the cost of a higher computing time.&lt;/p&gt;
&lt;p&gt;I agree that Mathlab is great for numerical algorithms, but I still prefer Python over Mathlab, because I&#39;m more confortable
with it, and have many libraries, and it&#39;s more simpler to call code in other languages, written in C or Java. That allow us
to increase the performance, and I like to test how much it could be improved.&lt;/p&gt;
&lt;p&gt;Several months ago, I start writing my most succesful algorithm, &lt;a href=&#34;http://sci2s.ugr.es/EAMHCO/#macmals&#34;&gt;Memetic Algorithms based on LS Chaining&lt;/a&gt;, in Python. I had several
doubts about the performance, so I start writing one element, an Steady-State Genetic Algorithm, in Python.&lt;/p&gt;
&lt;h4 id=&#34;calling-c-c-plus-plus-code-from-python&#34;&gt;Calling C/C++ code from python&lt;/h4&gt;
&lt;p&gt;The first challenge I had to tackle was to allow my python program to use the same benchmark functions than other implementations,
&lt;a href=&#34;http://sci2s.ugr.es/EAMHCO/#TestF&#34;&gt;CEC&#39;2005 benchmark&lt;/a&gt;.
This benchmark define the functions to optimize, thus its main funtionality is
evaluate my solutions, when each solution is a vector of real numbers, with a real fitness value.
The benchmark code was implemented (by its authors) in C/C++. So, my python code have to call C++ code.&lt;/p&gt;
&lt;p&gt;For doing that, I used the library &lt;a href=&#34;http://www.boost.org/doc/libs/1%5F50%5F0/libs/python/doc/index.html&#34;&gt;boost::python&lt;/a&gt;, that is, in my opinion, the simpler way to call C/C++ code, specially
when we uses &lt;a href=&#34;http://numpy.scipy.org/&#34;&gt;numpy&lt;/a&gt; package.&lt;/p&gt;
&lt;p&gt;In my case, it is very simple, because I need few functions:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#include &amp;lt;boost/python.hpp&amp;gt;
#include &amp;lt;boost/python/numeric.hpp&amp;gt;
#include &amp;lt;boost/python/list.hpp&amp;gt;
#include &amp;lt;iostream&amp;gt;
#include &amp;quot;cec2005/cec2005.h&amp;quot;
#include &amp;quot;cec2005/srandom.h&amp;quot;

using namespace boost::python;

Random r(new SRandom(12345679));

void set_function(int fun, int dim) {
    init_cec2005(&amp;amp;r, fun, dim);
}

double evalua(const numeric::array &amp;amp;el) {
   const tuple &amp;amp;shape = extract&amp;lt;tuple&amp;gt;(el.attr(&amp;quot;shape&amp;quot;));
   unsigned n = boost::python::extract&amp;lt;unsigned&amp;gt;(shape[0]);
   double *tmp = new double[n];
  for(unsigned int i = 0; i &amp;lt; n; i++)
    {
      tmp[i] = boost::python::extract&amp;lt;double&amp;gt;(el[i]);
    }
  double result = eval_cec2005(tmp, n);
  delete tmp;
  return result;
}
...

BOOST_PYTHON_MODULE(libpycec2005)
{
    using namespace boost::python;
    numeric::array::set_module_and_type( &amp;quot;numpy&amp;quot;, &amp;quot;ndarray&amp;quot;);
    def(&amp;quot;config&amp;quot;, &amp;amp;set_function);
    def(&amp;quot;evaluate&amp;quot;, &amp;amp;evalua);
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More info in the good &lt;a href=&#34;http://www.boost.org/doc/libs/1%5F50%5F0/libs/python/doc/index.html&#34;&gt;boost::python&lt;/a&gt; documentation.&lt;/p&gt;
&lt;p&gt;One we can call C/C++ code, we have implemented the algorithm in python code.
The test code was the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from ssga import SSGA
from readargs import ArgsCEC05
import libpycec2005 as cec2005
import numpy

def check_dimension(option, opt, value):
    if value not in [2, 10, 30, 50]:
        raise OptionValueError(
            &amp;quot;option %s: invalid dimensionality value: %r&amp;quot; % (opt, value))

def main():
    &amp;quot;&amp;quot;&amp;quot;
    Main program
    &amp;quot;&amp;quot;&amp;quot;
    args = ArgsCEC05()

    if  args.hasError:
        args.print_help_exit()

    fun = args.function
    dim = args.dimension

    print &amp;quot;Function: %d&amp;quot; %fun
    print &amp;quot;Dimension: %d&amp;quot; %dim
    cec2005.config(fun, dim)
    domain = cec2005.domain(fun)
    print &amp;quot;Domain: &amp;quot;, domain
    ea = SSGA(domain=domain, size=60, dim=dim, fitness=cec2005.evaluate)

    for x in xrange(25):
        ea.run(maxeval=dim*10000)
        [bestsol, bestfit] = ea.getBest()
        print &amp;quot;BestSol: &amp;quot;, bestsol
        print &amp;quot;BestFitness: %e&amp;quot; %bestfit
        ea.reset()

if __name__ == &amp;quot;__main__&amp;quot;:
    main()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This source code run the algorithm 25 times, and in each run the algorithm stops when they are created 10000*dim solutions.
These conditions are indicated in the &lt;a href=&#34;http://sci2s.ugr.es/EAMHCO/Tech-Report-May-30-05.pdf&#34;&gt;benchmark specification&lt;/a&gt;. The only parameter was the function (-f, used function 1 by
default) and dimension (-d) from 10, 30, 50.&lt;/p&gt;
&lt;h4 id=&#34;profiling-the-computing-time&#34;&gt;Profiling the computing time&lt;/h4&gt;
&lt;p&gt;How much time it takes? I have changed xrange(25) for xrange(1) and we have run its current version.
The final time was 7 minutes for dimension 10, and 21 minutes for dimension 30 (for only one function).&lt;/p&gt;
&lt;p&gt;Because I like to make more interesting things,  that only waiting computing time, I use the profile, only
one run for the function, to detect the functions/method more expensive in computing time.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m cProfile runcec.py -f 1 -d 10
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output was the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;        2943600 function calls (2943531 primitive calls) in 31.031 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
....
      1    0.001    0.001    0.126    0.126 ssga.py:1(&amp;lt;module&amp;gt;)
    99940    0.561    0.000   17.463    0.000 ssga.py:109(cross)
        1    0.000    0.000    0.000    0.000 ssga.py:123(reset)
        1    5.559    5.559   51.129   51.129 ssga.py:126(run)
        1    0.000    0.000    0.000    0.000 ssga.py:14(__init__)
        1    0.000    0.000    0.000    0.000 ssga.py:158(getBest)
        1    0.000    0.000    0.000    0.000 ssga.py:31(set_mutation_rate)
    99940    0.730    0.000    1.885    0.000 ssga.py:45(mutation)
    12438    0.286    0.000    0.758    0.000 ssga.py:50(mutationBGA)
        1    0.002    0.002    0.002    0.002 ssga.py:77(initPopulation)
   105883    1.101    0.000    5.604    0.000 ssga.py:89(updateWorst)
        1    0.000    0.000    0.000    0.000 ssga.py:9(SSGA)
    99940    1.049    0.000   20.617    0.000 ssga.py:97(getParents)
...

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the profile we can observe the most expensive methods in our code:
getParents (20 seconds), crossover operator (17 seconds), and updateWorst (5 seconds).
These methods are the 85% of the computing time, and the first two methods the 74%
of the computing time.&lt;/p&gt;
&lt;h4 id=&#34;optimising-the-code&#34;&gt;Optimising the code&lt;/h4&gt;
&lt;p&gt;That proves the majority of computing time is due to a minority of the code,
only three methods. If we can optimize these methods, our code could be
improved a lot.&lt;/p&gt;
&lt;p&gt;We can uses again the &lt;a href=&#34;http://www.boost.org/doc/libs/1%5F50%5F0/libs/python/doc/index.html&#34;&gt;boost::python&lt;/a&gt; package, but it&#39;s a bit tedious to use it. So, we have
used the &lt;a href=&#34;http://www.cython.org/&#34;&gt;cython&lt;/a&gt; package. With cython we can optimize the source code adding
information about the types.&lt;/p&gt;
&lt;p&gt;For instead, Instead of the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np

def distance(ind1,ind2):
    &amp;quot;&amp;quot;&amp;quot;
    Euclidean distance
    ind1 -- first array to compare
    ind2 -- second array to compare

    Return euclidean distance between the individuals

    &amp;gt;&amp;gt;&amp;gt; from numpy.random import rand
    &amp;gt;&amp;gt;&amp;gt; import numpy as np
    &amp;gt;&amp;gt;&amp;gt; dim = 30
    &amp;gt;&amp;gt;&amp;gt; sol = rand(dim)
    &amp;gt;&amp;gt;&amp;gt; distance(sol,sol)
    0.0
    &amp;gt;&amp;gt;&amp;gt; ref=np.zeros(dim)
    &amp;gt;&amp;gt;&amp;gt; dist=distance(sol,ref)
    &amp;gt;&amp;gt;&amp;gt; dist &amp;gt; 0
    True
    &amp;gt;&amp;gt;&amp;gt; dist2 = distance(sol*2,ref)
    &amp;gt;&amp;gt;&amp;gt; 2*dist == dist2
    True
    &amp;quot;&amp;quot;&amp;quot;
    dif = ind1-ind2
    sum = (dif*dif).sum()
    return math.sqrt(sum)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we can write:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cimport numpy as np
cimport cython
DTYPE = np.double
ctypedef np.double_t DTYPE_t
ctypedef np.int_t BTYPE_t

def distance(np.ndarray[DTYPE_t, ndim=1]ind1, np.ndarray[DTYPE_t, ndim=1] ind2):
    &amp;quot;&amp;quot;&amp;quot;
    Euclidean distance
    ind1 -- first array to compare
    ind2 -- second array to compare

    ....
    &amp;quot;&amp;quot;&amp;quot;
    cdef np.ndarray[DTYPE_t, ndim=1] dif = ind1-ind2
    cdef double sum = (dif*dif).sum()
    return math.sqrt(sum)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can see that is still very readable. we only have put information about the type
and dimension in the vector parameters and about the variables, using the keyword
cdef.&lt;/p&gt;
&lt;p&gt;Let&#39;s see as an example the first method, the crossover operator, implemented
in the crossBLX method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
import math

def crossBLX(mother,parent,domain,alpha):
    &amp;quot;&amp;quot;&amp;quot;
    crossover operator BLX-alpha

    mother -- mother (first individual)
    parent -- parent (second individual)
    domain -- domain to check
    alpha  -- parameter alpha

    Returns the new children following the expression children = random(x-alpha*dif, y+alpha*dif),
                where dif=abs(x,y) and x=lower(mother,parents), y=upper(mother,parents)

    &amp;gt;&amp;gt;&amp;gt; import numpy as np
    &amp;gt;&amp;gt;&amp;gt; low=-5
    &amp;gt;&amp;gt;&amp;gt; upper = 5
    &amp;gt;&amp;gt;&amp;gt; dim=30
    &amp;gt;&amp;gt;&amp;gt; sol = np.array([1,2,3,2,1])
    &amp;gt;&amp;gt;&amp;gt; crossBLX(sol,sol,[low,upper],0)
    array([ 1.,  2.,  3.,  2.,  1.])
    &amp;quot;&amp;quot;&amp;quot;
    diff = abs(mother-parent)
    dim = mother.size
    I=diff*alpha
    points = np.array([mother,parent])
    A=np.amin(points,axis=0)-I
    B=np.amax(points,axis=0)+I
    children = np.random.uniform(A,B,dim)
    [low,high]=domain
    return np.clip(children, low, high)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can see that it is very simple to implement using numpy, but it is still very slow. With cython I have
defined directly implement the many operations, the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def crossBLX(np.ndarray[DTYPE_t, ndim=1] mother,np.ndarray[DTYPE_t, ndim=1] parent,list domain, double alpha):
    &amp;quot;&amp;quot;&amp;quot;
    ...
    &amp;quot;&amp;quot;&amp;quot;
    cdef np.ndarray[DTYPE_t, ndim=1] C, r
    cdef int low, high, dim
    cdef double x, y
    cdef double I, A, B
    cdef unsigned i
    [low,high]=domain
    dim = mother.shape[0]
    C = np.zeros(dim)
    r = random.randreal(0,1,dim)

    for i in range(dim):
        if mother[i] &amp;lt; parent[i]:
           (x,y) = (mother[i],parent[i])
        else:
           (y,x) = (mother[i],parent[i])

        I = alpha*(y-x)
        A=x-I
        B=y+I

        if (A &amp;lt; low):
            A = low
        if (B &amp;gt; high):
            B = high

        C[i] = A+r[i]*(B-A)

    return C

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&#39;s true that the source code is more complicated, but it is still very readable.
I have compared the two implementation to make sure both return the same values.&lt;/p&gt;
&lt;h4 id=&#34;measuring-the-improvement&#34;&gt;Measuring the improvement&lt;/h4&gt;
&lt;p&gt;How much these small changes in the code?
I have profile the source code again and it gives me:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;         1020045 function calls (1019976 primitive calls) in 18.003 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
....
        1    0.001    0.001    0.127    0.127 ssga.py:1(&amp;lt;module&amp;gt;)
    99940    0.425    0.000    2.432    0.000 ssga.py:109(cross)
        1    0.000    0.000    0.000    0.000 ssga.py:123(reset)
        1    5.415    5.415   17.864   17.864 ssga.py:126(run)
        1    0.000    0.000    0.000    0.000 ssga.py:14(__init__)
        1    0.000    0.000    0.000    0.000 ssga.py:158(getBest)
        1    0.000    0.000    0.000    0.000 ssga.py:31(set_mutation_rate)
    99940    0.699    0.000    2.006    0.000 ssga.py:45(mutation)
    12544    0.338    0.000    0.929    0.000 ssga.py:50(mutationBGA)
        1    0.002    0.002    0.002    0.002 ssga.py:77(initPopulation)
   105959    0.775    0.000    1.343    0.000 ssga.py:89(updateWorst)
        1    0.000    0.000    0.000    0.000 ssga.py:9(SSGA)
    99940    0.940    0.000    6.665    0.000 ssga.py:97(getParents)
....

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can see the improvement obtained.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;Python&lt;/th&gt;
&lt;th&gt;Cython&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;cross          :&lt;/td&gt;
&lt;td&gt;17.4&lt;/td&gt;
&lt;td&gt;2.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getParents     :&lt;/td&gt;
&lt;td&gt;20.6&lt;/td&gt;
&lt;td&gt;6.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;updateWorst    :&lt;/td&gt;
&lt;td&gt;5.6&lt;/td&gt;
&lt;td&gt;1.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;43.6&lt;/td&gt;
&lt;td&gt;10.3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The new code takes only a 23% of the computing time of the previous code.
With these changes, we have reduced the total time from 51 seconds to 18 code.&lt;/p&gt;
&lt;h4 id=&#34;in-perspective&#34;&gt;In perspective&lt;/h4&gt;
&lt;p&gt;Now, I run the source code without the profile, and test the source code obtaining the
following time:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;dim=10&lt;/th&gt;
&lt;th&gt;dim=30&lt;/th&gt;
&lt;th&gt;dim=50&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;44s&lt;/td&gt;
&lt;td&gt;3240s (54m)&lt;/td&gt;
&lt;td&gt;&amp;ndash;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cython&lt;/td&gt;
&lt;td&gt;10s&lt;/td&gt;
&lt;td&gt;28s&lt;/td&gt;
&lt;td&gt;48s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Improvement&lt;/td&gt;
&lt;td&gt;77%&lt;/td&gt;
&lt;td&gt;99%&lt;/td&gt;
&lt;td&gt;&amp;mdash;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In the following table, we test the maximum time for one and 25 runs (the time depends on the
function used).&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;#functions&lt;/th&gt;
&lt;th&gt;dim=10&lt;/th&gt;
&lt;th&gt;dim=30&lt;/th&gt;
&lt;th&gt;dim=50&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;10s/18s&lt;/td&gt;
&lt;td&gt;28s/40s&lt;/td&gt;
&lt;td&gt;48s/1m&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;3/7m&lt;/td&gt;
&lt;td&gt;15/21m&lt;/td&gt;
&lt;td&gt;38m/&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;So, the total computing time is 7 minutes for dimension 10, and 21 minutes for dimension 30.
These numbers are very acceptable, specially because we can test in parallel the different functions
in a cluster of computers. Unfortunately, an implementation in Mathlab not only take more time, but
also, for licensing reasons, it could not run in parallel without limit.&lt;/p&gt;
&lt;p&gt;In resume, we can uses python code, not only to create experimental prototypes, but also to create
functional prototypes.&lt;/p&gt;
&lt;p&gt;And about the possible testing problem, I&#39;ve been working on it, but I think it is enough for a post,
didn&#39;t it? :-)&lt;/p&gt;
&lt;p&gt;All the code refered in the post, both in python and cython, is available at &lt;a href=&#34;https://github.com/dmolina/pyreal&#34;&gt;github&lt;/a&gt;, if you want to see it.&lt;/p&gt;
&lt;h3 id=&#34;callback-that-stop-algorithm-in-r&#34;&gt;&lt;span class=&#34;org-todo done DONE&#34;&gt;DONE&lt;/span&gt; Callback that stop algorithm in R&lt;/h3&gt;
&lt;p&gt;Today I was making a little programming using the mathematical software R (very useful
for statistics, by the way), for a little test.&lt;/p&gt;
&lt;p&gt;I&#39;m one of the authors of a Cran package (&lt;a href=&#34;http://cran.r-project.org/web/packages/Rmalschains/index.html&#34;&gt;Rmalschains&lt;/a&gt;) for continuous optimization, and I was testing another packages to compare results.&lt;/p&gt;
&lt;p&gt;Comparing a particular package I realise that the API doesn&#39;t give me enough control for
the comparisons. Briefly, to compare different algorithms all of them should stop when the same
number of solutions is achieved. Unfortunately, for the DE package, the stopping criterion is the
maximum iterations number, and for one strategy (the default strategy) this number differs,
maintaining the same maximum iterations number, in function of the function to improve. I know, not
so briefly :-).&lt;/p&gt;
&lt;p&gt;In resume, I want to pass a function to evaluate solutions to an algorithm, and that only the first
&lt;em&gt;maxEvals&lt;/em&gt; solutions could be considered. So, it should be nice that after &lt;em&gt;maxEvals&lt;/em&gt; function evaluations
the algorithm will stop.&lt;/p&gt;
&lt;p&gt;The aim is very simple in a theorical way, but I have only the control over a callback function used by
the algorithm, and I cannot use an &amp;lsquo;exit&amp;rsquo; function into the function, because in that case will stop the global program,
not only the current state of the algorithm.&lt;/p&gt;
&lt;p&gt;The solution? Using these &amp;lsquo;complex&amp;rsquo; concepts that many people think that are useless, specially my CS students :-).
Combining a call with continuation with a closure:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;finalFitness = callCC (function(exitFitness) {
     fitnessCheck &amp;lt;- function(fn, maxevals) {
          function(x) {

               if (total == 0 || total &amp;lt; maxevals) {
                  total &amp;lt;&amp;lt;- total +1;
                  fitness = fn(x);

                  if (total == 1 || fitness &amp;lt; bestFitness) {
                     bestFitness &amp;lt;&amp;lt;- fitness;
                  }

               }

               if (total &amp;gt;= maxevals) {
                  exitFitness(bestFitness);
               }


               fitness;
           }

      }


      fitCheck = fitnessCheck(fun$fitness, fun$maxevals)

      log &amp;lt;- capture.output({
          total &amp;lt;- 0
          result=DEoptim(fitCheck, lower, upper, control=list(itermax=fun$maxevals/NP))
      })

      exitFitness(result$optim$bestval)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I know, it is a bit confusing. callCC implement the concept of &lt;em&gt;call-with-current-continuation&lt;/em&gt;
to run a code with an &lt;em&gt;exit&lt;/em&gt; function &lt;strong&gt;exitFitness&lt;/strong&gt; that allows me to stop the run of the algorithm.
Because the function only does a run of the  algorithm (&lt;strong&gt;DEOptim&lt;/strong&gt;), I can stop when I want.
Also, to make it more elegant, I use a closure &lt;strong&gt;fitnessCheck&lt;/strong&gt;  that receives a function and a
maximum number of call, and it stops when the maximum calls number is achieved
(&lt;em&gt;total&lt;/em&gt; and &lt;em&gt;bestFitness&lt;/em&gt; are global variable, so the way to modify their values is using
&amp;laquo;- instead of the classical &amp;lt;- or =).&lt;/p&gt;
&lt;p&gt;By the way, &lt;strong&gt;capture.output&lt;/strong&gt; is a function that disables all the output of DEoptim algorithm.&lt;/p&gt;
&lt;h3 id=&#34;property-based-testing&#34;&gt;&lt;span class=&#34;org-todo done DONE&#34;&gt;DONE&lt;/span&gt; Property-Based Testing&lt;/h3&gt;
&lt;p&gt;Today I was reviewing a paper that I am doing in collaboration with other colleagues,
a Phd student living in Sweden (in Västerås, a lovely city at a hour from Stockholm,
I had a stay for 3 months three years ago). Then, to be sure that the proposed algorithm,
a memetic version of a Differential Evolution, I started to implement it.&lt;/p&gt;
&lt;p&gt;During the code, I need to create group of random variables, without repetition.&lt;/p&gt;
&lt;p&gt;it could be generated in the following way:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in range(popsize):
    r1[i] = np.random.rand...
    r2[i] = np.random.rand...

    while r1[i] == r2[i]:
        r2[i] = np.random.rand...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, it is not practical, for Matlab/Numpy it is better to work as vectors:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;r1 = np.random.choice(popsize, popsize)
r2 = np.random.choice(popsize, popsize)
# Avoid repeated values
r2 = change_repeated(r2, r1, popsize)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I need &lt;strong&gt;change_repeated&lt;/strong&gt; to randomly generated again the values in r2 when it is equals
than r1 (in the same position).&lt;/p&gt;
&lt;p&gt;Then, I create the function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def change_repeated(values, original, maxvalue: int):
    &amp;quot;&amp;quot;&amp;quot;
    Repeat the values which are equals than original (position by position)

    :param values: array vector
    :param original: array vector or elements to not repeat
    :param maxvalue: maximum value (new ones will be between [0,  maxvalue])
    :returns: list of new values
    :rtype: ndarray.

    &amp;quot;&amp;quot;&amp;quot;
    equals, = np.nonzero(values == original)

    while len(equals) &amp;gt; 0:
        size = len(equals)
        values[equals] = np.random.choice(maxvalue, size)
        equals, = np.nonzero(values == original)

    return values
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great! Now, how I could test it? It could give several examples, and test again them. However,
this type of tests can be very boring, so I applied &lt;a href=&#34;https://es.slideshare.net/ScottWlaschin/an-introduction-to-property-based-testing&#34;&gt;Property-based testing&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this type of tests, instead of comparing examples of inputs and outputs, you test properties
that the function should follow for every possible input.&lt;/p&gt;
&lt;p&gt;For instance, if you have implemented sqrt function:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Traditional testing&lt;/dt&gt;
&lt;dd&gt;Check sqrt(25)==5,  sqrt(16)==4,  sqrt(9)==3,  sqrt(5)=2.23&amp;hellip;.&lt;/dd&gt;
&lt;dt&gt;Property-based testing&lt;/dt&gt;
&lt;dd&gt;Check that the result of sqrt multiply for itself gives the original number.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;When you are using property-based testing, you can use a particular library to
automatically run your test with random inputs (with some constraints) hundreds
of times.
There are many tools for this: from the original &lt;a href=&#34;https://en.wikipedia.org/wiki/QuickCheck&#34;&gt;QuickCheck&lt;/a&gt;, &lt;a href=&#34;https://www.scalacheck.org/&#34;&gt;ScalaCheck&lt;/a&gt; for Scala, or &lt;a href=&#34;https://github.com/HypothesisWorks/hypothesis-python&#34;&gt;Hypothesis&lt;/a&gt; for Python.
In our case,  we are using the simple Hypothesis, that it is very &lt;a href=&#34;https://hypothesis.readthedocs.io/en/latest/quickstart.html&#34;&gt;well-documented&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In our case, the properties of repeated(ys, xs) are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;when xs and ys have some variable in common:
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;repeated(ys,  xs) must be different than ys.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the result must be different than original vector (to avoid to modify the original one).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The indexes where ys and repeated(ys, xs) are different xs == ys.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The testing was done in the following way:&lt;/p&gt;
&lt;p&gt;First the import:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from hypothesis import given
import hypothesis.strategies as st
import numpy as np
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Then, we describe the range of float values:&lt;/li&gt;
&lt;/ul&gt;
&lt;!--listend--&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type_index = st.integers(min_value=0, max_value=popsize)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In that way, type_index create random values between [0,  popsize-1]&lt;/p&gt;
&lt;p&gt;Then, we define the input as a list of previous integers:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;type_list = st.lists(type_index, min_size=popsize, max_size=popsize)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have set the min_size and max_size equals to get lists with the same size.
Hypothesis works by default with lists of different sizes.&lt;/p&gt;
&lt;p&gt;Then, we say the type of each parameter:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@given(type_list, type_list)
def test_random_norepeat(x, y):
    xs = np.array(x)
    ys_orig = np.array(y)
    ys = np.copy(ys_orig)

    if np.any(xs == ys):
        ys = change_repeated(ys, xs, dim)
        # It cannot be any repeated element
        assert not np.any(xs == ys)
        # It can be change any  algorithm
        assert not np.all(ys == ys_orig)
        # The change must be justify
        assert np.all((ys == ys_orig) | (ys_orig == xs))
        # Check that all values are between [0, dim]
        assert np.all((ys &amp;gt;= 0) &amp;amp; (ys &amp;lt; dim))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When it is run with &lt;strong&gt;py.test&lt;/strong&gt; the hypothesis library will test the function with
hundreds of random xs and ys, when xs and ys are lists of size &lt;strong&gt;popsize&lt;/strong&gt; and the
values between [0, popsize). If it fails, it will show you the &lt;em&gt;xs&lt;/em&gt; and &lt;em&gt;ys&lt;/em&gt;
values for which the code fails the test, it is very useful.&lt;/p&gt;
&lt;p&gt;By the way, the original DE can be implemented like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Init population
pop = pop_init(popsize, dim, min=min_value, max=max_value)
fit = np.array([eval(sol) for sol in pop])
nevals = 0

while nevals &amp;lt;= maxevals:
    # Generate all random positions
    r1 = np.random.choice(popsize, popsize)
    r2 = np.random.choice(popsize, popsize)
    r3 = np.random.choice(popsize, popsize)
    # Avoid repeated values
    r2 = change_repeated(r2, r1, popsize)
    r3 = change_repeated_list(r3, [r1, r2], popsize)
    # New population, mutation
    V = pop[r1] + F*(pop[r2]-pop[r3])
    # Clipping
    V = np.clip(V, min_value, max_value)
    # Define U
    U = np.copy(pop)
    # Select cr
    cr = np.random.rand(popsize*dim).reshape((popsize, dim))
    # Make sure that for each individual a position is changed
    cr[np.arange(popsize), np.random.choice(dim, popsize)] = 0
    # Eq. 2 (crossover)
    U.flat[cr.flat &amp;lt; CR] = V.flat
    fitU = [eval(sol) for sol in U]
    nevals += popsize
    # Replacement
    better_cond = fitU &amp;lt; fit
    # Expand for dimension
    better_cond = np.repeat(better_cond, dim).reshape((popsize, dim))
    # Replace the best individual in population
    pop = np.where(better_cond, U, pop)
    fit = np.minimum(fit, fitU)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I have to organize it a little, but in only 35 lines (including comments) a complete
&lt;a href=&#34;https://en.wikipedia.org/wiki/Differential%5Fevolution&#34;&gt;Differential Evolution&lt;/a&gt; can be implemented. Numpy is awesome!&lt;/p&gt;
&lt;h3 id=&#34;introduction-to-julia&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Introduction to Julia&lt;/h3&gt;
&lt;p&gt;The last year I have been working in a promising programming language,
&lt;a href=&#34;http://julialang.org/&#34;&gt;Julia&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;hola
Even I have done a presentation focused on people with Computer Science
background (so the talk compares Julia against Python),
&lt;a href=&#34;https://github.com/dmolina/julia%5Fpresentacion/blob/master/Julia%5FPresentation%5Fslides.pdf&#34;&gt;Julia Talk in English&lt;/a&gt;
and &lt;a href=&#34;https://github.com/dmolina/julia%5Fpresentacion/blob/master/Julia%5FPresentacion%5Fslides.pdf&#34;&gt;Julia Talk in
Spanish&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The resources of that talk are available at &lt;a href=&#34;https://github.com/dmolina/julia%5Fpresentacion/&#34;&gt;Github
Repository&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;emacs&#34;&gt;Emacs&lt;/h2&gt;
&lt;h3 id=&#34;elfeed-using-emacs-for-reading-rss&#34;&gt;&lt;span class=&#34;org-todo done DONE&#34;&gt;DONE&lt;/span&gt; Elfeed: Using emacs for reading RSS&lt;/h3&gt;
&lt;p&gt;In last years I have been using Emacs for almost all my daily tasks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reading my emails (using &lt;a href=&#34;http://www.djcbsoftware.nl/code/mu/mu4e.html&#34;&gt;mu4e&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Creating the slides for my courses using org-beamer.&lt;/li&gt;
&lt;li&gt;Using dired to navigate for the file system).&lt;/li&gt;
&lt;li&gt;Publishing this blog (using &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; and &lt;a href=&#34;https://ox-hugo.scripter.co&#34;&gt;ox-hugo&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last thing to integrate into emacs is reading blogs and news from RSS files.
Adding &lt;a href=&#34;https://github.com/skeeto/elfeed&#34;&gt;elfeed&lt;/a&gt; and &lt;a href=&#34;https://github.com/remyhonig/elfeed-org&#34;&gt;elfeed-org&lt;/a&gt; I was able to create RSS. elfeed-org
is very simple, it allows to add the feeds as items in org-mode:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;- Blogs                                                              :elfeed:

  - https://www.meneame.net/rss                                  :news:portada:
  - https://www.meneame.net/rss?status=queued                            :news:
  - http://planet.emacsen.org/atom.xml                                :emacs:
  - https://www.reddit.com/r/programming/.rss                     :programming:
  ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The tags for each feed will be shared for all articles.&lt;/p&gt;
&lt;p&gt;Then, loading &lt;strong&gt;elfeed&lt;/strong&gt;, it can be obtained a screen showing the different articles:&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/screen/elfeed.png&#34; &gt;
&lt;img data-src=&#34;/screen/elfeed.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;And selecting an article, it can be open, read and open each link by the default browser.&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/screen/elfeed2.png&#34; &gt;
&lt;img data-src=&#34;/screen/elfeed2.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;Several opinions about elfeed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It is very simple to use.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The use of tags is very powerful, not only they received the tags from the
category, and you can add a tag to an article.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The search filter is simple and very powerful, you can filter both for date and for tags.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The search filter can be kept as bookmark, so using C-x r b it can be seen the
article using a particular filter.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To summary, &lt;strong&gt;elfeed&lt;/strong&gt; has been a great discovery. If you use emacs, give it a try.&lt;/p&gt;
&lt;h3 id=&#34;fill-more-or-the-important-of-reading-documentation&#34;&gt;&lt;span class=&#34;org-todo done DONE&#34;&gt;DONE&lt;/span&gt; Fill-more or the important of reading documentation&lt;/h3&gt;
&lt;p&gt;I &lt;strong&gt;love&lt;/strong&gt; Emacs and the auto-fill more. When I work I use it always to make
easier to read the text (with a small value, like 80 or 100). Then, if I have
to copy to a Word Document (in collaboration with other people) or a text (like
in the submission of a review) I simple set the fill-column to a large value
(2000 or similar), with C-x f. Later, I copy all the text.&lt;/p&gt;
&lt;p&gt;Until now I have suffered in silence a small problem in text-mode (not in
org-mode). If you put&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Text.

- Item 1.
- Item 2.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the fill-mode, you have:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Text.

- Item 1 Item 2.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And to have in right you have to put a line between them:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Text.

- Item 1.

- Item 2.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(The line between Text and first item is also required).&lt;/p&gt;
&lt;p&gt;I though it was something inevitable, but checking the documentation,&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.emacswiki.org/emacs/FillParagraph&#34;&gt;https://www.emacswiki.org/emacs/FillParagraph&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I have known that with a simple line in elisp that behavior is fixed:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-elisp&#34;&gt;;; The original value is &amp;quot;\f\\|[      ]*$&amp;quot;, so we add the bullets (-), (+), and (*).
;; There is no need for &amp;quot;^&amp;quot; as the regexp is matched at the beginning of line.
(setq paragraph-start &amp;quot;\f\\|[ \t]*$\\|[ \t]*[-+*] &amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I must check the available documentation more often :-).&lt;/p&gt;
&lt;h2 id=&#34;teaching&#34;&gt;Teaching&lt;/h2&gt;
&lt;h3 id=&#34;using-python-for-business-intelligence&#34;&gt;&lt;span class=&#34;org-todo done DONE&#34;&gt;DONE&lt;/span&gt; Using Python for Business Intelligence&lt;/h3&gt;
&lt;p&gt;Two weeks ago I started my first teaching day, replacing a teacher that has
still not gone to Ceuta (because the temporal contract was offered to many
people, and all of them refuse it). Do not worry, they will have the material, I
said to myself, naïvely.&lt;/p&gt;
&lt;p&gt;However, my Phd. advisor, the coordinator of the course, has decided to replace
the practice classes from &lt;a href=&#34;https://www.knime.com/&#34;&gt;Knime&lt;/a&gt; to Python using the different tools availables.
The reason? Because the Python, with R, are very popular in &lt;a href=&#34;https://en.wikipedia.org/wiki/Data%5Fscience&#34;&gt;Data Science&lt;/a&gt;. Also,
in Python there are very good tools for data analysis (like &lt;a href=&#34;http://www.numpy.org/&#34;&gt;numpy&lt;/a&gt;, &lt;a href=&#34;http://pandas.pydata.org/&#34;&gt;pandas&lt;/a&gt;) or
machine learning (&lt;a href=&#34;http://scikit-learn.org/stable/&#34;&gt;scikit-learn&lt;/a&gt;, &amp;hellip;). It seems a good idea, but I have not
material, and I have only two days :-O.&lt;/p&gt;
&lt;p&gt;Even more, I had still no access to the Moodle for the material of the course.
So, after a very busy Saturday, I finished including a material,  in
&lt;a href=&#34;http://github.com/dmolina/es%5Fintro%5Fpython&#34;&gt;http://github.com/dmolina/es%5Fintro%5Fpython&lt;/a&gt;, with interesting references and an
install introduction.&lt;/p&gt;
&lt;p&gt;Also, I use a very curious tool, &lt;a href=&#34;https://gitpitch.com&#34;&gt;https://gitpitch.com&lt;/a&gt;, that allow to create
slides from a markdown file from the repository github, &lt;a href=&#34;https://gitpitch.com/dmolina/es%5Fintro%5Fpython/master?grs=github&amp;amp;t=moon&#34;&gt;Slides using Pitch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My final experience was:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Very few students, so it was very relaxed because you can solve the problems
for each student. However, using the &lt;a href=&#34;https://www.anaconda.com/&#34;&gt;anaconda&lt;/a&gt; there is few problems (and the .
In prevision of the big size of the anaconda distribution, my downloaded
version was copied by USB Disk to students.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;a href=&#34;http://jupyter.org/&#34;&gt;jupyter notebook&lt;/a&gt; allow to test the python code without installing or
learning an IDE (later they can install which they prefer, but for teaching
you do not need any of them).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You have to prepare exercises, because if not, you talk and show and you can
finished in few minutes a material that takes you many hours.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you have only a weekend for preparing material, I must have already strong
knowledge about the topic (fortunately,  it was my case). If not, you will not
be confident teaching it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the second day, I was preparing another slide for teaching pandas (with the
most useful operations, by my experience), available as pdf format here:
&lt;a href=&#34;./slides/slides_pandas.pdf&#34;&gt;slides_pandas.pdf&lt;/a&gt; (In a future post, I will say as I
prepare my slides using Emacs+Org-mode). &lt;em&gt;Unfortunately&lt;/em&gt;, the new teacher was
ready,  and I have to finish my courses using python for BI.&lt;/p&gt;
&lt;h3 id=&#34;introduction-to-cmake&#34;&gt;&lt;span class=&#34;org-todo done DONE&#34;&gt;DONE&lt;/span&gt; Introduction to CMake&lt;/h3&gt;
&lt;p&gt;In my last course, I decided to give a small introduction about CMake. The
reason is that, although we teach them Make, the majority of students do not use
them in their programs. In fact, many times they create a &amp;ldquo;makefile&amp;rdquo; program to
pretend they are using &amp;ldquo;make&amp;rdquo;, but actually, it is a bash script.
My intention is to teach them &lt;a href=&#34;http://cmake.org/&#34;&gt;&lt;strong&gt;Cmake&lt;/strong&gt;&lt;/a&gt; to encourage them to use an automatic tool
for compiling, expecting they use it more, by its simpler syntax.&lt;/p&gt;
&lt;p&gt;The english version is:&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/capture_english.png&#34; &gt;
&lt;img data-src=&#34;/img/capture_english.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;The spanish version is:&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/capture_spanish.png&#34; &gt;
&lt;img data-src=&#34;/img/capture_spanish.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;p&gt;All the source code (in &lt;a href=&#34;https://github.com/hakimel/reveal.js/&#34;&gt;reveal.js&lt;/a&gt;, through &lt;a href=&#34;https://github.com/yjwen/org-reveal/&#34;&gt;org-reveal&lt;/a&gt;) are available at:
&lt;a href=&#34;https://github.com/dmolina/intro%5Fcmake&#34;&gt;https://github.com/dmolina/intro%5Fcmake&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;introducción-a-cmake&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Introducción a CMake&lt;/h3&gt;
&lt;p&gt;En mi último curso, decidí dar una pequeña introducción sobre CMake:&lt;/p&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/capture_spanish.png&#34; &gt;
&lt;img data-src=&#34;/img/capture_spanish.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; &gt;&lt;/a&gt;



&lt;/figure&gt;

&lt;h2 id=&#34;opensource&#34;&gt;OpenSource&lt;/h2&gt;
&lt;h3 id=&#34;firefox-3-dot-5-and-mouseless&#34;&gt;&lt;span class=&#34;org-todo done DONE&#34;&gt;DONE&lt;/span&gt; Firefox 3.5 and Mouseless&lt;/h3&gt;
&lt;p&gt;I have recently changed to &lt;a href=&#34;https://www.mozilla.org/en-US/firefox/new/&#34;&gt;Firefox 3.5&lt;/a&gt;, and it is awesome!!&lt;/p&gt;
&lt;p&gt;The main improvements I have checked:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Better performance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reader mode, it is very useful to read without distractions, specially in
mobile. Also, it is mouseless friendly, with the shortkey &lt;strong&gt;Ctrl+Alt+r&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Screenshots of a website, that you can share with anybody (not more excuses
for my students for not showing me their web app in develop).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The bad thing is that many extensions are not valid anymore:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.zotero.org/&#34;&gt;Zotero&lt;/a&gt; has changed to be a java application, and the great &lt;a href=&#34;https://github.com/vspinu/zotelo&#34;&gt;Zotelo (extension
for Emacs)&lt;/a&gt; is not working anymore :-(.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Also, several extensions to improve the mouseless navigation stop working.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fortunately, &lt;em&gt;uBlock Origin&lt;/em&gt; is still working, and I have found &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/tridactyl-vim/&#34;&gt;Tridactyl&lt;/a&gt;, an
extension with several nice features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;f&lt;/strong&gt; and &lt;strong&gt;F&lt;/strong&gt; allows you to open links (in same tab or new) identifying them with
letters (in a very sensible way, my favourive way until now).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;b&lt;/strong&gt; is bookmarks, it allows you to go to another open tab.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;s&lt;/strong&gt; is search mode using the history, with tab you can go your favourite website
more easily.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And &lt;strong&gt;ZZ&lt;/strong&gt; close all firefox tabs, very useful for a person with Vim-background
like me :-).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To summarize, if you do not like use the mouse for almost everything, and you
want to browse more easily, try &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/tridactyl-vim/&#34;&gt;Tridactyl&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;computer-science&#34;&gt;Computer_Science&lt;/h2&gt;
&lt;h3 id=&#34;participation-in-ieee-congress-on-evolutionary-computation-cec-2018&#34;&gt;&lt;span class=&#34;org-todo done DONE&#34;&gt;DONE&lt;/span&gt; Participation in IEEE Congress on Evolutionary Computation CEC&#39;2018&lt;/h3&gt;
&lt;p&gt;Several weeks ago, I was at the the &lt;a href=&#34;http://www.ecomp.poli.br/~wcci2018/&#34;&gt;IEEE Conference on Evolutionary Computation
(CEC&#39;2018)&lt;/a&gt;, and also at the National Conference on Artificial Intelligence,
in Spain, &lt;a href=&#34;https://sci2s.ugr.es/caepia18/inicio.html&#34;&gt;website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&#34;https://speakerdeck.com/dmolina&#34;&gt;https://speakerdeck.com/dmolina&lt;/a&gt; there are the slides of my
presentations in the International Conference.&lt;/p&gt;
&lt;p&gt;In particular, my works are the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A new algorithm, &lt;strong&gt;SHADE-ILS&lt;/strong&gt; which won the Large Scale Global Optimization,
&lt;a href=&#34;https://speakerdeck.com/dmolina/shade-with-iterative-local-search-for-large-scale-global-optimization&#34;&gt;slides&lt;/a&gt;. You spanish readers, there is also a new &lt;a href=&#34;https://speakerdeck.com/dmolina/shade-con-una-busqueda-local-iterativa-para-optimizacion-continua-de-alta-dimensionalidad&#34;&gt;version in Spanish.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;In English&lt;/strong&gt;&lt;/p&gt;
&lt;script async class=&#34;speakerdeck-embed&#34;
data-id=&#34;22192a5760234cb8984632450bec1b42&#34; data-ratio=&#34;1.33333333333333&#34;
src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;&lt;strong&gt;In Spanish&lt;/strong&gt;&lt;/p&gt;
&lt;script async class=&#34;speakerdeck-embed&#34;
data-id=&#34;91646e938fd34096b1613126a1828101&#34; data-ratio=&#34;1.33333333333333&#34;
src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/winner_lsgo_2018.png&#34; data-caption=&#34;Figure 1: Certificate as a winner of the LSGO competition&#34;&gt;
&lt;img data-src=&#34;/img/winner_lsgo_2018.png&#34; class=&#34;lazyload&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Figure 1: Certificate as a winner of the LSGO competition
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;A new website for comparisons algorithms, &lt;a href=&#34;https://tacolab.org&#34;&gt;https://tacolab.org&lt;/a&gt;, which is briefly
described &lt;a href=&#34;https://speakerdeck.com/dmolina/taco-toolkit-for-automatic-comparison-optimizers-for-lsgo&#34;&gt;here in English&lt;/a&gt;, and &lt;a href=&#34;http://slides.tacolab.org/&#34;&gt;also in Spanish&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt;: I will talk about the Tacolab website in next entries, because it is the
results of many weeks of works.&lt;/p&gt;
&lt;h3 id=&#34;new-lsgo-competition-at-the-cec-2019&#34;&gt;&lt;span class=&#34;org-todo done DONE&#34;&gt;DONE&lt;/span&gt; New LSGO Competition at the CEC&#39;2019&lt;/h3&gt;
&lt;p&gt;I write because I am organizing the &lt;a href=&#34;http://www.tflsgo.org/special%5Fsessions/cec2019.html&#34;&gt;Large-Scale Global Optimization Competition&lt;/a&gt;
at the &lt;a href=&#34;http://cec2019.org/&#34;&gt;IEEE Congress on Evolutionary Computation CEC&#39;2019&lt;/a&gt;, with interesting
news:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Source code for C++/Matlab/Java/Python.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The source code store during the run all required files with the results, you
do not need to worry about that, we do it for you!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In python it is as simple as &lt;em&gt;pip install cec2013lsgo&lt;/em&gt; to be able to run the
experiments, in C++, and the source code and documentation is &lt;a href=&#34;https://github.com/dmolina/cec2013lsgo/&#34;&gt;freely available&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The new site &lt;a href=&#34;https://tacolab.org&#34;&gt;tacolab.org&lt;/a&gt; to compare your own proposals with existings ones, it
do the tables, figures and comparisons for you (including statistical testing).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is not excuse for not participating!&lt;/p&gt;
&lt;h3 id=&#34;packages-in-python-for-cec-2019-100-digit-competition&#34;&gt;&lt;span class=&#34;org-todo done DONE&#34;&gt;DONE&lt;/span&gt; Packages in Python for CEC&#39;2019 100 Digit Competition&lt;/h3&gt;
&lt;p&gt;I usually design my evolutionary algorithms in Python (initially for
prototyping, but I am too lazy for doing later a version in C/C++ or similar).
However, unfortunately, the majority of people in my area work in Matlab 😭.
Thus, sometimes I have to wrap the source code for the benchmarks in competition
to python ☺.&lt;/p&gt;
&lt;p&gt;This is the story of the my new package at PyPi:
&lt;a href=&#34;https://pypi.org/project/cec2019comp100digit/&#34;&gt;https://pypi.org/project/cec2019comp100digit/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This package is for being able to participate in the &lt;a href=&#34;http://cec2019.org/programs/competitions.html#cec-06&#34;&gt;CEC&#39;2019 100-Digit Challenge
Competition&lt;/a&gt;, website here:
&lt;a href=&#34;http://www.ntu.edu.sg/home/epnsugan/index%5Ffiles/CEC2019/CEC2019.htm&#34;&gt;http://www.ntu.edu.sg/home/epnsugan/index%5Ffiles/CEC2019/CEC2019.htm&lt;/a&gt;.
That website was the source code in C/C++ and Matlab (using mex), but it was
missing Python. This package solves it.&lt;/p&gt;
&lt;p&gt;As usual, the complete source code is &lt;a href=&#34;https://github.com/dmolina/cec2019comp100digit&#34;&gt;available at Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the package Pypi page there is &lt;a href=&#34;https://pypi.org/project/cec2019comp100digit/&#34;&gt;more documentation&lt;/a&gt;, but in the following I
briefly describe the API:&lt;/p&gt;
&lt;p&gt;The package is very simple to use. There is a package cec2019comp100digit with
three functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;init(fun_id, Dim)&lt;/strong&gt;
Init the function for the dimension selected.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;eval(sol)&lt;/strong&gt;
Eval the solution, when sol is a numpy (or array) of dimension &lt;strong&gt;Dim&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;end()&lt;/strong&gt;
Free resources.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;installation&#34;&gt;Installation&lt;/h4&gt;
&lt;p&gt;It as simple as:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pip install cec2019comp100digit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python3.&lt;/li&gt;
&lt;li&gt;Numpy.&lt;/li&gt;
&lt;li&gt;Cython.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;process&#34;&gt;Process&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For init the function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from cec2019comp100digit import cec2019comp100digit
bench = cec2019comp100digit
bench.init(3, 10) # Init function 3 with dimension 10
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To create one or several solutions to eval&lt;/p&gt;
&lt;p&gt;It can be used both numpy and/or array (but only numpy has been actually
tested).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
sol = np.random.rand(10)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Evaluate the solution&lt;/p&gt;
&lt;p&gt;It is as simple as:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;fit = bench.eval(sol)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, for free the resources&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;bench.end()
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also use it for participate in the competition.&lt;/p&gt;
&lt;p&gt;I would like to take this opportunity to remind you that I too am organising
&lt;a href=&#34;https://dmolina.github.io/en/post/lsgo%5Fcec2019/&#34;&gt;another competition&lt;/a&gt;, you do not any excuse 😄.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>/about/</link>
      <pubDate>Sun, 15 Jul 2012 00:00:00 +0200</pubDate>
      <guid>/about/</guid>
      <description>&lt;style&gt;.org-center { margin-left: auto; margin-right: auto; text-align: center; }&lt;/style&gt;
&lt;div class=&#34;org-center&#34;&gt;
  &lt;div&gt;&lt;/div&gt;













&lt;figure&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;/img/me_small.jpg&#34; data-caption=&#34;Figure 1: Which is this crazy guy?&#34;&gt;
&lt;img data-src=&#34;/img/me_small.jpg&#34; class=&#34;lazyload&#34; alt=&#34;&#34; &gt;&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    Figure 1: &lt;strong&gt;Which is this crazy guy?&lt;/strong&gt;
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;/div&gt;
&lt;p&gt;I am a teacher assistant at the University of Granada, specialised in Artificial
Intelligence. As many people, I have several roles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Since a researcher side, I have a index-h of 16, with more than 24 papers
(more than 18 in Q1), with more than 3000 citations. In the main menu, you
can see my publications (in many case with the PDF freely available, ask me
if you need any other). Also, I was until this year the Chair on the &lt;a href=&#34;http://tflsgo.org/&#34;&gt;IEEE
CIS Task Force on Large-Scale Global Optimization&lt;/a&gt;,
because it is a type of optimization I am particularly interested (I was
winner in two international competitions, at 2010 and more recently at
2018).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As a teacher, now I am teaching at the University of Granada, in &lt;a href=&#34;https://en.wikipedia.org/wiki/Ceuta&#34;&gt;Ceuta&lt;/a&gt;, but for
more than 10 years I was teaching in the University of Cádiz, where I left a
part of my hearts (people were more my friends than my colleagues).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As a computer science that love programming, I am interesting in programming
in different languages (like C++, Java, &amp;hellip;.), and I particularly love Python,
and another interesting growing languages (like Rust or Julia). I define
myself also as a Linux user, this is the only OS in my computers for more than
15 years. Also, I am a truly believer in &lt;a href=&#34;https://www.gnu.org/philosophy/free-sw.html&#34;&gt;Free Software&lt;/a&gt; (actually, I was the
secretary of Free Software Office at the University of Cadiz.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As a real-world person, I love reading books, watching films, and spend my
free time with my girlfriend Amalia ❤.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Improving performance in Python</title>
      <link>/post/improving_python1/</link>
      <pubDate>Sun, 15 Jul 2012 00:00:00 +0200</pubDate>
      <guid>/post/improving_python1/</guid>
      <description>&lt;p&gt;All the source code of this post is available at &lt;a href=&#34;https://github.com/dmolina/pyreal&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the previous post, I recognized my predilection for Python. For me, it is a great language for create prototypes in
many areas. For my research work, I usually creates/designs algorithms for continuous optimization using
&lt;a href=&#34;http://en.wikipedia.org/wiki/Evolutionary_algorithm&#34;&gt;evolutionary algorithms&lt;/a&gt;. For these algorithms, languages like C/C++ or Java are widely used, specially for its
good performance (to publish, it is usual to have to make many comparisons between algorithms, so the performance
could be critical. However, for testing new ideas, many authors uses other tools like Mathlab that reduces the
developer time at the cost of a higher computing time.&lt;/p&gt;
&lt;p&gt;I agree that Mathlab is great for numerical algorithms, but I still prefer Python over Mathlab, because I&#39;m more confortable
with it, and have many libraries, and it&#39;s more simpler to call code in other languages, written in C or Java. That allow us
to increase the performance, and I like to test how much it could be improved.&lt;/p&gt;
&lt;p&gt;Several months ago, I start writing my most succesful algorithm, &lt;a href=&#34;http://sci2s.ugr.es/EAMHCO/#macmals&#34;&gt;Memetic Algorithms based on LS Chaining&lt;/a&gt;, in Python. I had several
doubts about the performance, so I start writing one element, an Steady-State Genetic Algorithm, in Python.&lt;/p&gt;
&lt;h2 id=&#34;calling-c-c-code-from-python&#34;&gt;Calling C/C++ code from python&lt;/h2&gt;
&lt;p&gt;The first challenge I had to tackle was to allow my python program to use the same benchmark functions than other implementations,
&lt;a href=&#34;http://sci2s.ugr.es/EAMHCO/#TestF&#34;&gt;CEC&#39;2005 benchmark&lt;/a&gt;.
This benchmark define the functions to optimize, thus its main funtionality is
evaluate my solutions, when each solution is a vector of real numbers, with a real fitness value.
The benchmark code was implemented (by its authors) in C/C++. So, my python code have to call C++ code.&lt;/p&gt;
&lt;p&gt;For doing that, I used the library &lt;a href=&#34;http://www.boost.org/doc/libs/1_50_0/libs/python/doc/index.html&#34;&gt;boost::python&lt;/a&gt;, that is, in my opinion, the simpler way to call C/C++ code, specially
when we uses &lt;a href=&#34;http://numpy.scipy.org/&#34;&gt;numpy&lt;/a&gt; package.&lt;/p&gt;
&lt;p&gt;In my case, it is very simple, because I need few functions:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#include &amp;lt;boost/python.hpp&amp;gt;
#include &amp;lt;boost/python/numeric.hpp&amp;gt;
#include &amp;lt;boost/python/list.hpp&amp;gt;
#include &amp;lt;iostream&amp;gt;
#include &amp;quot;cec2005/cec2005.h&amp;quot;
#include &amp;quot;cec2005/srandom.h&amp;quot;

using namespace boost::python;

Random r(new SRandom(12345679));

void set_function(int fun, int dim) {
    init_cec2005(&amp;amp;r, fun, dim);
}

double evalua(const numeric::array &amp;amp;el) {
   const tuple &amp;amp;shape = extract&amp;lt;tuple&amp;gt;(el.attr(&amp;quot;shape&amp;quot;));
   unsigned n = boost::python::extract&amp;lt;unsigned&amp;gt;(shape[0]);
   double *tmp = new double[n];
  for(unsigned int i = 0; i &amp;lt; n; i++)
    {
      tmp[i] = boost::python::extract&amp;lt;double&amp;gt;(el[i]);
    }
  double result = eval_cec2005(tmp, n);
  delete tmp;
  return result;
}
...

BOOST_PYTHON_MODULE(libpycec2005)
{
    using namespace boost::python;
    numeric::array::set_module_and_type( &amp;quot;numpy&amp;quot;, &amp;quot;ndarray&amp;quot;);
    def(&amp;quot;config&amp;quot;, &amp;amp;set_function);
    def(&amp;quot;evaluate&amp;quot;, &amp;amp;evalua);
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More info in the good &lt;a href=&#34;http://www.boost.org/doc/libs/1_50_0/libs/python/doc/index.html&#34;&gt;boost::python&lt;/a&gt; documentation.&lt;/p&gt;
&lt;p&gt;One we can call C/C++ code, we have implemented the algorithm in python code.
The test code was the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from ssga import SSGA
from readargs import ArgsCEC05
import libpycec2005 as cec2005
import numpy

def check_dimension(option, opt, value):
    if value not in [2, 10, 30, 50]:
        raise OptionValueError(
            &amp;quot;option %s: invalid dimensionality value: %r&amp;quot; % (opt, value))

def main():
    &amp;quot;&amp;quot;&amp;quot;
    Main program
    &amp;quot;&amp;quot;&amp;quot;
    args = ArgsCEC05()

    if  args.hasError:
        args.print_help_exit()

    fun = args.function
    dim = args.dimension

    print &amp;quot;Function: %d&amp;quot; %fun
    print &amp;quot;Dimension: %d&amp;quot; %dim
    cec2005.config(fun, dim)
    domain = cec2005.domain(fun)
    print &amp;quot;Domain: &amp;quot;, domain
    ea = SSGA(domain=domain, size=60, dim=dim, fitness=cec2005.evaluate)

    for x in xrange(25):
        ea.run(maxeval=dim*10000)
        [bestsol, bestfit] = ea.getBest()
        print &amp;quot;BestSol: &amp;quot;, bestsol
        print &amp;quot;BestFitness: %e&amp;quot; %bestfit
        ea.reset()

if __name__ == &amp;quot;__main__&amp;quot;:
    main()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This source code run the algorithm 25 times, and in each run the algorithm stops when they are created 10000*dim solutions.
These conditions are indicated in the &lt;a href=&#34;http://sci2s.ugr.es/EAMHCO/Tech-Report-May-30-05.pdf&#34;&gt;benchmark specification&lt;/a&gt;. The only parameter was the function (-f, used function 1 by
default) and dimension (-d) from 10, 30, 50.&lt;/p&gt;
&lt;h2 id=&#34;profiling-the-computing-time&#34;&gt;Profiling the computing time&lt;/h2&gt;
&lt;p&gt;How much time it takes? I have changed xrange(25) for xrange(1) and we have run its current version.
The final time was 7 minutes for dimension 10, and 21 minutes for dimension 30 (for only one function).&lt;/p&gt;
&lt;p&gt;Because I like to make more interesting things,  that only waiting computing time, I use the profile, only
one run for the function, to detect the functions/method more expensive in computing time.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -m cProfile runcec.py -f 1 -d 10
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output was the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;        2943600 function calls (2943531 primitive calls) in 31.031 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
....
      1    0.001    0.001    0.126    0.126 ssga.py:1(&amp;lt;module&amp;gt;)
    99940    0.561    0.000   17.463    0.000 ssga.py:109(cross)
        1    0.000    0.000    0.000    0.000 ssga.py:123(reset)
        1    5.559    5.559   51.129   51.129 ssga.py:126(run)
        1    0.000    0.000    0.000    0.000 ssga.py:14(__init__)
        1    0.000    0.000    0.000    0.000 ssga.py:158(getBest)
        1    0.000    0.000    0.000    0.000 ssga.py:31(set_mutation_rate)
    99940    0.730    0.000    1.885    0.000 ssga.py:45(mutation)
    12438    0.286    0.000    0.758    0.000 ssga.py:50(mutationBGA)
        1    0.002    0.002    0.002    0.002 ssga.py:77(initPopulation)
   105883    1.101    0.000    5.604    0.000 ssga.py:89(updateWorst)
        1    0.000    0.000    0.000    0.000 ssga.py:9(SSGA)
    99940    1.049    0.000   20.617    0.000 ssga.py:97(getParents)
...

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the profile we can observe the most expensive methods in our code:
getParents (20 seconds), crossover operator (17 seconds), and updateWorst (5 seconds).
These methods are the 85% of the computing time, and the first two methods the 74%
of the computing time.&lt;/p&gt;
&lt;h2 id=&#34;optimising-the-code&#34;&gt;Optimising the code&lt;/h2&gt;
&lt;p&gt;That proves the majority of computing time is due to a minority of the code,
only three methods. If we can optimize these methods, our code could be
improved a lot.&lt;/p&gt;
&lt;p&gt;We can uses again the &lt;a href=&#34;http://www.boost.org/doc/libs/1_50_0/libs/python/doc/index.html&#34;&gt;boost::python&lt;/a&gt; package, but it&#39;s a bit tedious to use it. So, we have
used the &lt;a href=&#34;http://www.cython.org/&#34;&gt;cython&lt;/a&gt; package. With cython we can optimize the source code adding
information about the types.&lt;/p&gt;
&lt;p&gt;For instead, Instead of the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np

def distance(ind1,ind2):
    &amp;quot;&amp;quot;&amp;quot;
    Euclidean distance
    ind1 -- first array to compare
    ind2 -- second array to compare

    Return euclidean distance between the individuals

    &amp;gt;&amp;gt;&amp;gt; from numpy.random import rand
    &amp;gt;&amp;gt;&amp;gt; import numpy as np
    &amp;gt;&amp;gt;&amp;gt; dim = 30
    &amp;gt;&amp;gt;&amp;gt; sol = rand(dim)
    &amp;gt;&amp;gt;&amp;gt; distance(sol,sol)
    0.0
    &amp;gt;&amp;gt;&amp;gt; ref=np.zeros(dim)
    &amp;gt;&amp;gt;&amp;gt; dist=distance(sol,ref)
    &amp;gt;&amp;gt;&amp;gt; dist &amp;gt; 0
    True
    &amp;gt;&amp;gt;&amp;gt; dist2 = distance(sol*2,ref)
    &amp;gt;&amp;gt;&amp;gt; 2*dist == dist2
    True
    &amp;quot;&amp;quot;&amp;quot;
    dif = ind1-ind2
    sum = (dif*dif).sum()
    return math.sqrt(sum)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we can write:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cimport numpy as np
cimport cython
DTYPE = np.double
ctypedef np.double_t DTYPE_t
ctypedef np.int_t BTYPE_t

def distance(np.ndarray[DTYPE_t, ndim=1]ind1, np.ndarray[DTYPE_t, ndim=1] ind2):
    &amp;quot;&amp;quot;&amp;quot;
    Euclidean distance
    ind1 -- first array to compare
    ind2 -- second array to compare

    ....
    &amp;quot;&amp;quot;&amp;quot;
    cdef np.ndarray[DTYPE_t, ndim=1] dif = ind1-ind2
    cdef double sum = (dif*dif).sum()
    return math.sqrt(sum)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can see that is still very readable. we only have put information about the type
and dimension in the vector parameters and about the variables, using the keyword
cdef.&lt;/p&gt;
&lt;p&gt;Let&#39;s see as an example the first method, the crossover operator, implemented
in the crossBLX method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
import math

def crossBLX(mother,parent,domain,alpha):
    &amp;quot;&amp;quot;&amp;quot;
    crossover operator BLX-alpha

    mother -- mother (first individual)
    parent -- parent (second individual)
    domain -- domain to check
    alpha  -- parameter alpha

    Returns the new children following the expression children = random(x-alpha*dif, y+alpha*dif),
                where dif=abs(x,y) and x=lower(mother,parents), y=upper(mother,parents)

    &amp;gt;&amp;gt;&amp;gt; import numpy as np
    &amp;gt;&amp;gt;&amp;gt; low=-5
    &amp;gt;&amp;gt;&amp;gt; upper = 5
    &amp;gt;&amp;gt;&amp;gt; dim=30
    &amp;gt;&amp;gt;&amp;gt; sol = np.array([1,2,3,2,1])
    &amp;gt;&amp;gt;&amp;gt; crossBLX(sol,sol,[low,upper],0)
    array([ 1.,  2.,  3.,  2.,  1.])
    &amp;quot;&amp;quot;&amp;quot;
    diff = abs(mother-parent)
    dim = mother.size
    I=diff*alpha
    points = np.array([mother,parent])
    A=np.amin(points,axis=0)-I
    B=np.amax(points,axis=0)+I
    children = np.random.uniform(A,B,dim)
    [low,high]=domain
    return np.clip(children, low, high)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can see that it is very simple to implement using numpy, but it is still very slow. With cython I have
defined directly implement the many operations, the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def crossBLX(np.ndarray[DTYPE_t, ndim=1] mother,np.ndarray[DTYPE_t, ndim=1] parent,list domain, double alpha):
    &amp;quot;&amp;quot;&amp;quot;
    ...
    &amp;quot;&amp;quot;&amp;quot;
    cdef np.ndarray[DTYPE_t, ndim=1] C, r
    cdef int low, high, dim
    cdef double x, y
    cdef double I, A, B
    cdef unsigned i
    [low,high]=domain
    dim = mother.shape[0]
    C = np.zeros(dim)
    r = random.randreal(0,1,dim)

    for i in range(dim):
        if mother[i] &amp;lt; parent[i]:
           (x,y) = (mother[i],parent[i])
        else:
           (y,x) = (mother[i],parent[i])

        I = alpha*(y-x)
        A=x-I
        B=y+I

        if (A &amp;lt; low):
            A = low
        if (B &amp;gt; high):
            B = high

        C[i] = A+r[i]*(B-A)

    return C

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&#39;s true that the source code is more complicated, but it is still very readable.
I have compared the two implementation to make sure both return the same values.&lt;/p&gt;
&lt;h2 id=&#34;measuring-the-improvement&#34;&gt;Measuring the improvement&lt;/h2&gt;
&lt;p&gt;How much these small changes in the code?
I have profile the source code again and it gives me:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;         1020045 function calls (1019976 primitive calls) in 18.003 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
....
        1    0.001    0.001    0.127    0.127 ssga.py:1(&amp;lt;module&amp;gt;)
    99940    0.425    0.000    2.432    0.000 ssga.py:109(cross)
        1    0.000    0.000    0.000    0.000 ssga.py:123(reset)
        1    5.415    5.415   17.864   17.864 ssga.py:126(run)
        1    0.000    0.000    0.000    0.000 ssga.py:14(__init__)
        1    0.000    0.000    0.000    0.000 ssga.py:158(getBest)
        1    0.000    0.000    0.000    0.000 ssga.py:31(set_mutation_rate)
    99940    0.699    0.000    2.006    0.000 ssga.py:45(mutation)
    12544    0.338    0.000    0.929    0.000 ssga.py:50(mutationBGA)
        1    0.002    0.002    0.002    0.002 ssga.py:77(initPopulation)
   105959    0.775    0.000    1.343    0.000 ssga.py:89(updateWorst)
        1    0.000    0.000    0.000    0.000 ssga.py:9(SSGA)
    99940    0.940    0.000    6.665    0.000 ssga.py:97(getParents)
....

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can see the improvement obtained.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;Python&lt;/th&gt;
&lt;th&gt;Cython&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;cross          :&lt;/td&gt;
&lt;td&gt;17.4&lt;/td&gt;
&lt;td&gt;2.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getParents     :&lt;/td&gt;
&lt;td&gt;20.6&lt;/td&gt;
&lt;td&gt;6.6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;updateWorst    :&lt;/td&gt;
&lt;td&gt;5.6&lt;/td&gt;
&lt;td&gt;1.3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;43.6&lt;/td&gt;
&lt;td&gt;10.3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The new code takes only a 23% of the computing time of the previous code.
With these changes, we have reduced the total time from 51 seconds to 18 code.&lt;/p&gt;
&lt;h2 id=&#34;in-perspective&#34;&gt;In perspective&lt;/h2&gt;
&lt;p&gt;Now, I run the source code without the profile, and test the source code obtaining the
following time:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th&gt;dim=10&lt;/th&gt;
&lt;th&gt;dim=30&lt;/th&gt;
&lt;th&gt;dim=50&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;44s&lt;/td&gt;
&lt;td&gt;3240s (54m)&lt;/td&gt;
&lt;td&gt;&amp;ndash;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cython&lt;/td&gt;
&lt;td&gt;10s&lt;/td&gt;
&lt;td&gt;28s&lt;/td&gt;
&lt;td&gt;48s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Improvement&lt;/td&gt;
&lt;td&gt;77%&lt;/td&gt;
&lt;td&gt;99%&lt;/td&gt;
&lt;td&gt;&amp;mdash;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;In the following table, we test the maximum time for one and 25 runs (the time depends on the
function used).&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;#functions&lt;/th&gt;
&lt;th&gt;dim=10&lt;/th&gt;
&lt;th&gt;dim=30&lt;/th&gt;
&lt;th&gt;dim=50&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;10s/18s&lt;/td&gt;
&lt;td&gt;28s/40s&lt;/td&gt;
&lt;td&gt;48s/1m&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;3/7m&lt;/td&gt;
&lt;td&gt;15/21m&lt;/td&gt;
&lt;td&gt;38m/&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;So, the total computing time is 7 minutes for dimension 10, and 21 minutes for dimension 30.
These numbers are very acceptable, specially because we can test in parallel the different functions
in a cluster of computers. Unfortunately, an implementation in Mathlab not only take more time, but
also, for licensing reasons, it could not run in parallel without limit.&lt;/p&gt;
&lt;p&gt;In resume, we can uses python code, not only to create experimental prototypes, but also to create
functional prototypes.&lt;/p&gt;
&lt;p&gt;And about the possible testing problem, I&#39;ve been working on it, but I think it is enough for a post,
didn&#39;t it? :-)&lt;/p&gt;
&lt;p&gt;All the code refered in the post, both in python and cython, is available at &lt;a href=&#34;https://github.com/dmolina/pyreal&#34;&gt;github&lt;/a&gt;, if you want to see it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Callback that stop algorithm in R</title>
      <link>/post/rmain/</link>
      <pubDate>Tue, 10 Jul 2012 00:00:00 +0200</pubDate>
      <guid>/post/rmain/</guid>
      <description>&lt;p&gt;Today I was making a little programming using the mathematical software R (very useful
for statistics, by the way), for a little test.&lt;/p&gt;
&lt;p&gt;I&#39;m one of the authors of a Cran package (&lt;a href=&#34;http://cran.r-project.org/web/packages/Rmalschains/index.html&#34;&gt;Rmalschains&lt;/a&gt;) for continuous optimization, and I was testing another packages to compare results.&lt;/p&gt;
&lt;p&gt;Comparing a particular package I realise that the API doesn&#39;t give me enough control for
the comparisons. Briefly, to compare different algorithms all of them should stop when the same
number of solutions is achieved. Unfortunately, for the DE package, the stopping criterion is the
maximum iterations number, and for one strategy (the default strategy) this number differs,
maintaining the same maximum iterations number, in function of the function to improve. I know, not
so briefly :-).&lt;/p&gt;
&lt;p&gt;In resume, I want to pass a function to evaluate solutions to an algorithm, and that only the first
&lt;em&gt;maxEvals&lt;/em&gt; solutions could be considered. So, it should be nice that after &lt;em&gt;maxEvals&lt;/em&gt; function evaluations
the algorithm will stop.&lt;/p&gt;
&lt;p&gt;The aim is very simple in a theorical way, but I have only the control over a callback function used by
the algorithm, and I cannot use an &amp;lsquo;exit&amp;rsquo; function into the function, because in that case will stop the global program,
not only the current state of the algorithm.&lt;/p&gt;
&lt;p&gt;The solution? Using these &amp;lsquo;complex&amp;rsquo; concepts that many people think that are useless, specially my CS students :-).
Combining a call with continuation with a closure:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;finalFitness = callCC (function(exitFitness) {
     fitnessCheck &amp;lt;- function(fn, maxevals) {
          function(x) {

               if (total == 0 || total &amp;lt; maxevals) {
                  total &amp;lt;&amp;lt;- total +1;
                  fitness = fn(x);

                  if (total == 1 || fitness &amp;lt; bestFitness) {
                     bestFitness &amp;lt;&amp;lt;- fitness;
                  }

               }

               if (total &amp;gt;= maxevals) {
                  exitFitness(bestFitness);
               }


               fitness;
           }

      }


      fitCheck = fitnessCheck(fun$fitness, fun$maxevals)

      log &amp;lt;- capture.output({
          total &amp;lt;- 0
          result=DEoptim(fitCheck, lower, upper, control=list(itermax=fun$maxevals/NP))
      })

      exitFitness(result$optim$bestval)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I know, it is a bit confusing. callCC implement the concept of &lt;em&gt;call-with-current-continuation&lt;/em&gt;
to run a code with an &lt;em&gt;exit&lt;/em&gt; function &lt;strong&gt;exitFitness&lt;/strong&gt; that allows me to stop the run of the algorithm.
Because the function only does a run of the  algorithm (&lt;strong&gt;DEOptim&lt;/strong&gt;), I can stop when I want.
Also, to make it more elegant, I use a closure &lt;strong&gt;fitnessCheck&lt;/strong&gt;  that receives a function and a
maximum number of call, and it stops when the maximum calls number is achieved
(&lt;em&gt;total&lt;/em&gt; and &lt;em&gt;bestFitness&lt;/em&gt; are global variable, so the way to modify their values is using
&amp;laquo;- instead of the classical &amp;lt;- or =).&lt;/p&gt;
&lt;p&gt;By the way, &lt;strong&gt;capture.output&lt;/strong&gt; is a function that disables all the output of DEoptim algorithm.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learning new languages?</title>
      <link>/post/languages/</link>
      <pubDate>Wed, 04 Jul 2012 00:00:00 +0200</pubDate>
      <guid>/post/languages/</guid>
      <description>&lt;p&gt;I love to learn new programming languages, specially whose that has new features that could be used to change your personal
programming way. Also, it is very useful to get used to accept new ideas and avoid get in in the famous &lt;em&gt;language wars&lt;/em&gt;.
In this post, I&#39;m going to give my personal idea of these languages, starting from a C/C++ and Java
programmer. Over all, this is my personal opinion, after hours of working in these languages, not only using a
joy program.&lt;/p&gt;
&lt;h2 id=&#34;perl&#34;&gt;Perl&lt;/h2&gt;
&lt;p&gt;It was my first &lt;em&gt;scripting language&lt;/em&gt;, and I&#39;ve been working in Perl in a proyect for a private company for two years
eight hours per day (my first job without extra hours without been paid). In that case, it was a good language decision,
and I learnt many tricks to write readable programs in &lt;strong&gt;Perl&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;underline&#34;&gt;community&lt;/span&gt;:
A community that likes to create an ecosystem to reuse, that create the &lt;a href=&#34;http://www.cpan.org&#34;&gt;CPAN&lt;/a&gt;. At the same time, a
community that enforces freedom, allowing each one to use the library and guidelines that considers good.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;underline&#34;&gt;The good:&lt;/span&gt;
The &lt;a href=&#34;http://www.cpan.org&#34;&gt;CPAN&lt;/a&gt;, and the conciseness and flexbility of the language, with packages like &lt;a href=&#34;http://search.cpan.org/search?q%3DMoose&#34;&gt;Moose&lt;/a&gt; and several test packages
(and very strange packages in &lt;em&gt;ACME&lt;/em&gt; domain :-) ). At the same time, there is always simpler version of packages if
you want them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;underline&#34;&gt;The bad:&lt;/span&gt;
The original Object-Oriented, the complexity in creating your own modules (in comparisons to the simpler
packages model like python). Also, if you don&#39;t want to use object-oriented, sometimes you need to create complex
combinations of &lt;em&gt;hashes&lt;/em&gt; and &lt;em&gt;arrays&lt;/em&gt; with references, and it is not very readable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;underline&#34;&gt;Developer tools&lt;/span&gt;: I usually edit with &lt;a href=&#34;http://www.vim.org&#34;&gt;Vim&lt;/a&gt;, I don&#39;t need any particular framework, but I strongly recommend strict
mode, and essential packages like &lt;a href=&#34;http://search.cpan.org/search?q%3Dautodie&#34;&gt;autodie&lt;/a&gt;, &lt;a href=&#34;http://search.cpan.org/search?q%3DMoose&#34;&gt;Moose&lt;/a&gt;, &lt;a href=&#34;http://search.cpan.org/search?q%3DFile::IO&#34;&gt;&amp;lt;:IO&amp;gt;&lt;/a&gt;, test packages like &lt;a href=&#34;http://search.cpan.org/search?q%3DTest::More&#34;&gt;Test::More&lt;/a&gt;. Always check &lt;a href=&#34;http://www.cpan.org&#34;&gt;CPAN&lt;/a&gt; before a new
proyect.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I resume, although many people say that Perl is dead, it is still alive, and if you learn it, you don&#39;t regret it, it is
a very useful tool. I still makes many small programs almost everyday using Perl because it&#39;s a very useful language,
mainly for text processing (probably the best one).&lt;/p&gt;
&lt;p&gt;To learn more I recommend the free book &lt;a href=&#34;http://hop.perl.plover.com/&#34;&gt;Higher-Order Perl&lt;/a&gt;, it is a opening book. Also, the freely book &lt;a href=&#34;http://www.modernperlbooks.com&#34;&gt;Modern Perl&lt;/a&gt; is a
useful book to see new modern programming ways and wonderful packages.&lt;/p&gt;
&lt;h2 id=&#34;python&#34;&gt;Python&lt;/h2&gt;
&lt;p&gt;My first love, a very simple but more readable, and very useful tools for any field. The most beautiful syntax in my
opinion. I have been deeply working in Python, for prototyping and several complex project.  Also, very good in web
developer (my favourite is &lt;a href=&#34;http://www.djangoproject.com&#34;&gt;Django&lt;/a&gt; but there are many good ones).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;underline&#34;&gt;The good:&lt;/span&gt; Its syntax, packages and object models. Also, its libraries have tendency to have simple APIs (by a
community very worried about that). The great interactive shell &lt;a href=&#34;http://ipython.org&#34;&gt;ipython&lt;/a&gt;. Also, it have many interesting tools for
scientific researchers: &lt;a href=&#34;http://numpy.scipy.org/&#34;&gt;numpy&lt;/a&gt;, &lt;a href=&#34;http://matplotlib.sourceforge.net/&#34;&gt;matplotlib&lt;/a&gt;, several parallel libraries, &lt;a href=&#34;http://www.scipy.org/&#34;&gt;scipy&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;underline&#34;&gt;The bad:&lt;/span&gt; nothing really serious, the inherent problems with duck typing, like excessive trivial testing. However,
tools like &lt;a href=&#34;http://pypi.python.org/pypi/pyflakes/&#34;&gt;pyflakes&lt;/a&gt; or &lt;a href=&#34;http://pypi.python.org/pypi/pylint/&#34;&gt;pylint&lt;/a&gt; allow developers reduce trivial errors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;underline&#34;&gt;Developer tools:&lt;/span&gt; Sometimes I edit with &lt;a href=&#34;http://www.vim.org&#34;&gt;Vim&lt;/a&gt;, but nowadays I uses &lt;a href=&#34;http://code.google.com/p/spyderlib/&#34;&gt;spyder 2&lt;/a&gt; by its integration with  &lt;a href=&#34;http://pypi.python.org/pypi/pyflakes/&#34;&gt;pyflakes&lt;/a&gt; and
&lt;a href=&#34;http://ipython.org&#34;&gt;ipython&lt;/a&gt;. There are also very good IDEs like &lt;a href=&#34;http://eric-ide.python-projects.org/&#34;&gt;eric4&lt;/a&gt;. For performance aspects, there are many tools, in a future
post, I am going to put a real example of improvement.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I resume, it is a very good language that any developer should now, because it is very simple and useful. Specially for
scientific works, not only by the mathematical tool &lt;a href=&#34;http://www.sagemath.org/&#34;&gt;Sage&lt;/a&gt; but also by many libraries.&lt;/p&gt;
&lt;h2 id=&#34;scala&#34;&gt;Scala&lt;/h2&gt;
&lt;p&gt;The most recent adquisition to this list is the &lt;a href=&#34;http://www.scala-lang.org/&#34;&gt;Scala language&lt;/a&gt;. This &lt;strong&gt;JVM language&lt;/strong&gt; is similar to &lt;a href=&#34;http://groovy.codehaus.org/&#34;&gt;Groovy&lt;/a&gt; but in my
opinion, superior.  However, it is a very good language but I think that it is not very popular in pragmatic programmer
by the scientific origin of its author, clearly seen in its documentation. Also, sometimes the &lt;em&gt;converse&lt;/em&gt; developers
likes to show how flexible and powerful is the language with complex examples (not in length, but in its syntax) have
given the idea of a complex language.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;underline&#34;&gt;The good:&lt;/span&gt; Its syntax is very orthogonal and simple (reducing the verbosity of Java). It is a strong typing system
(different with &lt;strong&gt;groovy&lt;/strong&gt;) with a auto-detection of types (like auto keywords in other languages). It enforces to uses
immutable classes and method, allowing you a functional programming.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;underline&#34;&gt;The bad:&lt;/span&gt; Differences in generical contenedors with Java. There are very powerful but you have to converse from one
to another.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;underline&#34;&gt;Developer tools:&lt;/span&gt; like in Java, I recommed &lt;a href=&#34;http://www.eclipse.org&#34;&gt;Eclipse&lt;/a&gt; with &lt;a href=&#34;http://scala-ide.org/&#34;&gt;scala plugins&lt;/a&gt;. For compiling proyects in both
languages you can use &lt;a href=&#34;http://maven.apache.org/&#34;&gt;maven&lt;/a&gt; but you need several plugins (only if you combine them). Another compiling tools like
&lt;a href=&#34;https://github.com/harrah/xsbt/wiki/&#34;&gt;sbt&lt;/a&gt; or &lt;a href=&#34;http://gradle.org/&#34;&gt;grandle&lt;/a&gt; could be useful.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In resume, a very interesting language that java developer should give a look, but it still have a promising future.&lt;/p&gt;
&lt;p&gt;In my opinion, its community should &amp;lsquo;break&amp;rsquo; the idea of complexity or it going to be a very niching language while groovy would
be stronger and widely used.&lt;/p&gt;
&lt;h2 id=&#34;in-resume&#34;&gt;In resume&lt;/h2&gt;
&lt;p&gt;I always recommend to learn new languages. You can learn many possibilites: clojure, immutability, libraries, &amp;hellip; that are not
so visible in your current main language.&lt;/p&gt;
&lt;p&gt;PS: I have let out other languages that I&#39;ve been playing in: R, Ruby, Haskell, groovy, F# because I want to write only about languages
in which I have a strong knowledge, and used it in real-word projects (and not only joy projects).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An ACO algorithm benchmarked on the BBOB noiseless function testbed</title>
      <link>/publication/liao-2012159/</link>
      <pubDate>Sun, 01 Jan 2012 00:00:00 +0000</pubDate>
      <guid>/publication/liao-2012159/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Modeling dynamics of a real-coded CHC algorithm in terms of dynamical probability distributions</title>
      <link>/publication/marin-2012331/</link>
      <pubDate>Sun, 01 Jan 2012 00:00:00 +0000</pubDate>
      <guid>/publication/marin-2012331/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Optimising real parameters using the information of a mesh of solutions: VMO algorithm</title>
      <link>/publication/puris-2012/</link>
      <pubDate>Sun, 01 Jan 2012 00:00:00 +0000</pubDate>
      <guid>/publication/puris-2012/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Region based memetic algorithm with LS chaining</title>
      <link>/publication/lacroix-2012/</link>
      <pubDate>Sun, 01 Jan 2012 00:00:00 +0000</pubDate>
      <guid>/publication/lacroix-2012/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Time series modeling and forecasting using memetic algorithms for regime-switching models</title>
      <link>/publication/bergmeir-20121841/</link>
      <pubDate>Sun, 01 Jan 2012 00:00:00 +0000</pubDate>
      <guid>/publication/bergmeir-20121841/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Variable mesh optimization for continuous optimization problems</title>
      <link>/publication/puris-2012511/</link>
      <pubDate>Sun, 01 Jan 2012 00:00:00 +0000</pubDate>
      <guid>/publication/puris-2012511/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A practical tutorial on the use of nonparametric statistical tests as a methodology for comparing evolutionary and swarm intelligence algorithms</title>
      <link>/publication/derrac-20113/</link>
      <pubDate>Sat, 01 Jan 2011 00:00:00 +0000</pubDate>
      <guid>/publication/derrac-20113/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A test for the homoscedasticity of the residuals in fuzzy rule-based forecasters</title>
      <link>/publication/aznarte-2011386/</link>
      <pubDate>Sat, 01 Jan 2011 00:00:00 +0000</pubDate>
      <guid>/publication/aznarte-2011386/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Editorial scalability of evolutionary algorithms and other metaheuristics for large-scale continuous optimization problems</title>
      <link>/publication/lozano-20112085/</link>
      <pubDate>Sat, 01 Jan 2011 00:00:00 +0000</pubDate>
      <guid>/publication/lozano-20112085/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Iterated greedy for the maximum diversity problem</title>
      <link>/publication/lozano-201131/</link>
      <pubDate>Sat, 01 Jan 2011 00:00:00 +0000</pubDate>
      <guid>/publication/lozano-201131/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Memetic algorithms based on local search chains for large scale continuous optimisation problems: MA-SSW-Chains</title>
      <link>/publication/molina-20112201/</link>
      <pubDate>Sat, 01 Jan 2011 00:00:00 +0000</pubDate>
      <guid>/publication/molina-20112201/</guid>
      <description></description>
    </item>
    
    <item>
      <title>MA-SW-Chains: Memetic algorithm based on local search chains for large scale continuous global optimization</title>
      <link>/publication/molina-2010/</link>
      <pubDate>Fri, 01 Jan 2010 00:00:00 +0000</pubDate>
      <guid>/publication/molina-2010/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Memetic algorithms for continuous optimisation based on local search chains</title>
      <link>/publication/molina-201027/</link>
      <pubDate>Fri, 01 Jan 2010 00:00:00 +0000</pubDate>
      <guid>/publication/molina-201027/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A study on the use of non-parametric tests for analyzing the evolutionary algorithms&#39; behaviour: A case study on the CEC&#39;2005 Special Session on Real Parameter Optimization</title>
      <link>/publication/garcia-2009617/</link>
      <pubDate>Thu, 01 Jan 2009 00:00:00 +0000</pubDate>
      <guid>/publication/garcia-2009617/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Memetic algorithm with local search chaining for continuous optimization problems: A scalability test</title>
      <link>/publication/molina-20091068/</link>
      <pubDate>Thu, 01 Jan 2009 00:00:00 +0000</pubDate>
      <guid>/publication/molina-20091068/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Memetic algorithm with local search chaining for large scale continuous optimization problems</title>
      <link>/publication/molina-2009830/</link>
      <pubDate>Thu, 01 Jan 2009 00:00:00 +0000</pubDate>
      <guid>/publication/molina-2009830/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Study of the influence of the local search method in memetic algorithms for large scale continuous optimization problems</title>
      <link>/publication/molina-2009221/</link>
      <pubDate>Thu, 01 Jan 2009 00:00:00 +0000</pubDate>
      <guid>/publication/molina-2009221/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Global and local real-coded genetic algorithms based on parent-centric crossover operators</title>
      <link>/publication/garcia-martinez-20081088/</link>
      <pubDate>Tue, 01 Jan 2008 00:00:00 +0000</pubDate>
      <guid>/publication/garcia-martinez-20081088/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Memetic algorithm for intense local search methods using local search chains</title>
      <link>/publication/molina-200858/</link>
      <pubDate>Tue, 01 Jan 2008 00:00:00 +0000</pubDate>
      <guid>/publication/molina-200858/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Real-parameter crossover operators with multiple descendents: An experimental study</title>
      <link>/publication/sanchez-2008246/</link>
      <pubDate>Tue, 01 Jan 2008 00:00:00 +0000</pubDate>
      <guid>/publication/sanchez-2008246/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A local genetic algorithm for binary-coded problems</title>
      <link>/publication/garcia-martinez-2006192/</link>
      <pubDate>Sun, 01 Jan 2006 00:00:00 +0000</pubDate>
      <guid>/publication/garcia-martinez-2006192/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Continuous scatter search: An analysis of the integration of some combination methods and improvement strategies</title>
      <link>/publication/herrera-2006450/</link>
      <pubDate>Sun, 01 Jan 2006 00:00:00 +0000</pubDate>
      <guid>/publication/herrera-2006450/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Adaptive local search parameters for real-coded memetic algorithms</title>
      <link>/publication/molina-2005888/</link>
      <pubDate>Sat, 01 Jan 2005 00:00:00 +0000</pubDate>
      <guid>/publication/molina-2005888/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Real-coded memetic algorithms with crossover hill-climbing</title>
      <link>/publication/lozano-2004273/</link>
      <pubDate>Thu, 01 Jan 2004 00:00:00 +0000</pubDate>
      <guid>/publication/lozano-2004273/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
